{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ms-paint",
  "type": "registry:ui",
  "title": "MS Paint",
  "description": "A customizable drawing canvas component with paint-like interface.",
  "dependencies": [
    "lucide-react",
    "lucide-react"
  ],
  "files": [
    {
      "path": "src/nuvyxui/components/ms-paint.tsx",
      "content": "\"use client\";\nimport React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Pencil, Eraser, Square, Save, Menu } from \"lucide-react\";\n\nexport interface MSpaintProps {\n  width?: number;\n  height?: number;\n  canvasWidth?: number;\n  canvasHeight?: number;\n  title?: string;\n  menuItems?: string[];\n  className?: string;\n  style?: React.CSSProperties;\n  colorPalette?: string[];\n  brushSize?: number;\n  eraserSize?: number;\n  onSave?: (canvas: HTMLCanvasElement) => void;\n}\n\ninterface CustomButtonProps {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: () => void;\n  title?: string;\n  variant?: \"default\" | \"ghost\";\n}\n\nconst CustomButton: React.FC<CustomButtonProps> = ({\n  children,\n  className = \"\",\n  onClick,\n  title = \"\",\n  variant = \"default\",\n}) => {\n  const variantStyles =\n    variant === \"ghost\"\n      ? \"hover:bg-gray-200 hover:text-gray-900\"\n      : \"bg-gray-200 text-gray-900 hover:bg-gray-300\";\n  return (\n    <button\n      className={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 disabled:opacity-50 disabled:cursor-not-allowed ${variantStyles} ${className}`}\n      onClick={onClick}\n      title={title}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst DEFAULT_COLORS = [\n  \"#000000\",\n  \"#FFFFFF\",\n  \"#FF0000\",\n  \"#00FF00\",\n  \"#0000FF\",\n  \"#FFFF00\",\n  \"#00FFFF\",\n  \"#FF00FF\",\n  \"#FFA500\",\n  \"#800080\",\n  \"#A52A2A\",\n  \"#808080\",\n];\n\nexport default function MSpaint({\n  width = 800,\n  height = 500,\n  canvasWidth = 2000,\n  canvasHeight = 2000,\n  title = \"untitled - Paint\",\n  menuItems = [\"File\", \"Edit\", \"View\", \"Image\", \"Options\", \"Help\"],\n  className = \"\",\n  style = {},\n  colorPalette = DEFAULT_COLORS,\n  brushSize = 2,\n  eraserSize = 20,\n  onSave,\n}: MSpaintProps) {\n  const backgroundColor = \"#FFFFFF\";\n  const defaultStatusMessage = \"For Help, click Help Topics on the Help Menu.\";\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const downloadLinkRef = useRef<HTMLAnchorElement>(null);\n  const colorPickerRef = useRef<HTMLInputElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastPosition, setLastPosition] = useState({ x: 0, y: 0 });\n  const [color, setColor] = useState(\"#000000\");\n  const [tool, setTool] = useState(\"brush\");\n  const [dimensions, setDimensions] = useState({ width, height });\n  const [dragState, setDragState] = useState({\n    isDragging: false,\n    offset: { x: 0, y: 0 },\n  });\n  const [statusText, setStatusText] = useState(defaultStatusMessage);\n  const [saveCount, setSaveCount] = useState(0);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  const isMobile = dimensions.width < 640;\n  const draggable = !isMobile;\n  const showWindowControls = !isMobile;\n  const canvasVisibleWidth = dimensions.width - (isMobile ? 52 : 76);\n\n  const cursorStyle = useCallback(() => {\n    if (tool === \"eraser\") {\n      return \"url(\\\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='white' stroke='black' stroke-width='1'><circle cx='12' cy='12' r='10'/></svg>\\\") 12 12, auto\";\n    } else {\n      const isLightColor = (() => {\n        const r = parseInt(color.slice(1, 3), 16);\n        const g = parseInt(color.slice(3, 5), 16);\n        const b = parseInt(color.slice(5, 7), 16);\n        return (0.299 * r + 0.587 * g + 0.114 * b) / 255 > 0.7;\n      })();\n\n      const encodedSVG = encodeURIComponent(`\n        <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'>\n          <circle cx='8' cy='8' r='6' fill='${color}' ${isLightColor ? 'stroke=\"black\" stroke-width=\"1\"' : \"\"} />\n        </svg>\n      `);\n      return `url(\"data:image/svg+xml;utf8,${encodedSVG}\") 8 8, crosshair`;\n    }\n  }, [tool, color]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n    if (context && canvas) {\n      context.fillStyle = backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (containerRef.current) {\n        const parentWidth =\n          containerRef.current.parentElement?.clientWidth || window.innerWidth;\n        const parentHeight = window.innerHeight;\n        setDimensions({\n          width:\n            parentWidth < 768\n              ? parentWidth > 20\n                ? parentWidth - 20\n                : parentWidth\n              : width,\n          height:\n            parentWidth < 768 ? Math.min(parentHeight - 100, height) : height,\n        });\n      }\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width, height]);\n\n  useEffect(() => {\n    if (!draggable) return;\n    const handleMouseMove = (e: MouseEvent) => {\n      if (dragState.isDragging) {\n        const left = e.clientX - dragState.offset.x;\n        const top = e.clientY - dragState.offset.y;\n        if (containerRef.current) {\n          containerRef.current.style.left = `${left}px`;\n          containerRef.current.style.top = `${top}px`;\n        }\n      }\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      if (dragState.isDragging && e.touches.length === 1) {\n        const touch = e.touches[0];\n        const left = touch.clientX - dragState.offset.x;\n        const top = touch.clientY - dragState.offset.y;\n        if (containerRef.current) {\n          containerRef.current.style.left = `${left}px`;\n          containerRef.current.style.top = `${top}px`;\n        }\n      }\n    };\n    const handleEnd = () => {\n      setDragState((prev) => ({ ...prev, isDragging: false }));\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleEnd);\n    document.addEventListener(\"touchmove\", handleTouchMove);\n    document.addEventListener(\"touchend\", handleEnd);\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleEnd);\n      document.removeEventListener(\"touchmove\", handleTouchMove);\n      document.removeEventListener(\"touchend\", handleEnd);\n    };\n  }, [draggable, dragState]);\n\n  useEffect(() => {\n    if (canvasContainerRef.current) {\n      canvasContainerRef.current.style.overflow = \"hidden\";\n    }\n  }, []);\n\n  const getCanvasScaleFactors = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { scaleX: 1, scaleY: 1 };\n    const rect = canvas.getBoundingClientRect();\n    return {\n      scaleX: canvas.width / rect.width,\n      scaleY: canvas.height / rect.height,\n    };\n  }, []);\n\n  const startDrawing = useCallback(\n    (\n      e:\n        | React.MouseEvent<HTMLCanvasElement>\n        | React.TouchEvent<HTMLCanvasElement>,\n    ) => {\n      const canvas = canvasRef.current;\n      const context = canvas?.getContext(\"2d\");\n      if (!context || !canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const { scaleX, scaleY } = getCanvasScaleFactors();\n\n      let clientX, clientY;\n      if (\"touches\" in e) {\n        if (e.touches.length !== 1) return;\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const x = (clientX - rect.left) * scaleX;\n      const y = (clientY - rect.top) * scaleY;\n      context.beginPath();\n      context.moveTo(x, y);\n      setLastPosition({ x, y });\n      setIsDrawing(true);\n    },\n    [getCanvasScaleFactors],\n  );\n\n  const draw = useCallback(\n    (\n      e:\n        | React.MouseEvent<HTMLCanvasElement>\n        | React.TouchEvent<HTMLCanvasElement>,\n    ) => {\n      if (!isDrawing) return;\n\n      const canvas = canvasRef.current;\n      const context = canvas?.getContext(\"2d\");\n      if (!context || !canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const { scaleX, scaleY } = getCanvasScaleFactors();\n      let clientX, clientY;\n      if (\"touches\" in e) {\n        e.preventDefault();\n        if (e.touches.length !== 1) return;\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const x = (clientX - rect.left) * scaleX;\n      const y = (clientY - rect.top) * scaleY;\n      context.beginPath();\n      context.moveTo(lastPosition.x, lastPosition.y);\n      context.lineTo(x, y);\n      context.strokeStyle = tool === \"eraser\" ? backgroundColor : color;\n      const currentToolSize = tool === \"eraser\" ? eraserSize : brushSize;\n      const lineWidth = currentToolSize * Math.max(scaleX, scaleY);\n      context.lineWidth = lineWidth;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.stroke();\n      setLastPosition({ x, y });\n    },\n    [\n      isDrawing,\n      lastPosition,\n      tool,\n      color,\n      brushSize,\n      eraserSize,\n      getCanvasScaleFactors,\n    ],\n  );\n\n  const startDragging = useCallback(\n    (\n      e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>,\n    ) => {\n      if (!draggable) return;\n      let clientX, clientY;\n      if (\"touches\" in e) {\n        if (e.touches.length !== 1) return;\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      setDragState({\n        isDragging: true,\n        offset: {\n          x: clientX - (containerRef.current?.offsetLeft || 0),\n          y: clientY - (containerRef.current?.offsetTop || 0),\n        },\n      });\n    },\n    [draggable],\n  );\n\n  const updateStatus = useCallback((text: string, resetAfter = 3000) => {\n    setStatusText(text);\n    setTimeout(() => setStatusText(defaultStatusMessage), resetAfter);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (!canvasRef.current) return;\n    try {\n      if (onSave) {\n        onSave(canvasRef.current);\n      } else {\n        const fileName = `${title.replace(\" - Paint\", \"\")}_${saveCount}.png`;\n        setSaveCount((prev) => prev + 1);\n\n        const dataUrl = canvasRef.current.toDataURL(\"image/png\");\n        if (downloadLinkRef.current) {\n          downloadLinkRef.current.href = dataUrl;\n          downloadLinkRef.current.download = fileName;\n          downloadLinkRef.current.click();\n        }\n\n        updateStatus(`Image saved as ${fileName}`);\n      }\n    } catch (error) {\n      console.error(\"Error saving image:\", error);\n      updateStatus(\"Error saving image. Try again.\");\n    }\n  }, [title, saveCount, onSave, updateStatus]);\n\n  const clearCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n    if (context && canvas) {\n      context.fillStyle = backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      updateStatus(\"Canvas cleared.\");\n    }\n  }, [updateStatus]);\n\n  const handleColorChange = useCallback(\n    (newColor: string) => {\n      setColor(newColor);\n      updateStatus(`Color selected: ${newColor}`, 2000);\n    },\n    [updateStatus],\n  );\n\n  const toggleColorPicker = useCallback(() => {\n    setShowColorPicker((prev) => {\n      const newState = !prev;\n      if (newState && colorPickerRef.current) {\n        setTimeout(() => colorPickerRef.current?.click(), 100);\n      }\n      return newState;\n    });\n  }, []);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`absolute md:px-0 bg-gray-200 border-2 border-white shadow-md ${className}`}\n      style={{\n        width: `${dimensions.width}px`,\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        maxWidth: \"100vw\",\n        ...style,\n      }}\n    >\n      <a ref={downloadLinkRef} style={{ display: \"none\" }} />\n      <div\n        className=\"bg-blue-900 text-white px-2 py-1 flex justify-between items-center\"\n        style={{ cursor: draggable ? \"move\" : \"default\" }}\n        onMouseDown={startDragging}\n        onTouchStart={startDragging}\n      >\n        <span className=\"truncate\">{title}</span>\n        {showWindowControls && (\n          <div className=\"flex gap-1\">\n            <CustomButton\n              variant=\"ghost\"\n              className=\"h-5 w-5 p-0 min-w-0 text-white hover:bg-blue-700\"\n            >\n              _\n            </CustomButton>\n            <CustomButton\n              variant=\"ghost\"\n              className=\"h-5 w-5 p-0 min-w-0 text-white hover:bg-blue-700\"\n            >\n              □\n            </CustomButton>\n            <CustomButton\n              variant=\"ghost\"\n              className=\"h-5 w-5 p-0 min-w-0 text-white hover:bg-blue-700\"\n            >\n              ×\n            </CustomButton>\n          </div>\n        )}\n      </div>\n\n      {menuItems && menuItems.length > 0 && (\n        <div className=\"relative bg-gray-300 px-2 py-1 text-sm\">\n          {isMobile ? (\n            <>\n              <CustomButton\n                onClick={() => setMenuOpen(!menuOpen)}\n                className=\"text-sm py-0.5 px-2 flex items-center\"\n              >\n                <Menu size={14} className=\"mr-1\" /> Menu\n              </CustomButton>\n\n              {menuOpen && (\n                <div className=\"absolute top-full left-0 z-10 bg-gray-300 shadow-md border border-gray-400 py-1 text-black\">\n                  {menuItems.map((item, index) => (\n                    <div\n                      key={index}\n                      className=\"px-4 py-2 hover:bg-gray-400 cursor-pointer text-black\"\n                      onClick={() => setMenuOpen(false)}\n                    >\n                      {item}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </>\n          ) : (\n            menuItems.map((item, index) => (\n              <span\n                key={index}\n                className=\"mr-4 px-2 py-0.5 hover:bg-gray-400 cursor-pointer rounded text-black\"\n              >\n                {item}\n              </span>\n            ))\n          )}\n        </div>\n      )}\n\n      <div className=\"flex\">\n        <div\n          className={`${isMobile ? \"w-10\" : \"w-12\"} bg-gray-300 p-1 border-r border-gray-400 flex flex-col items-center`}\n        >\n          <CustomButton\n            variant=\"ghost\"\n            className={`w-8 h-8 p-0 min-w-0 mb-1 ${tool === \"brush\" ? \"bg-blue-200 border-2 border-blue-600 shadow-lg\" : \"hover:bg-gray-200\"}`}\n            onClick={() => setTool(\"brush\")}\n            title=\"Brush Tool\"\n          >\n            <Pencil size={20} className=\"text-black\" />\n          </CustomButton>\n          <CustomButton\n            variant=\"ghost\"\n            className={`w-8 h-8 p-0 min-w-0 mb-1 ${tool === \"eraser\" ? \"bg-blue-200 border-2 border-blue-600 shadow-lg\" : \"hover:bg-gray-200\"}`}\n            onClick={() => setTool(\"eraser\")}\n            title=\"Eraser Tool\"\n          >\n            <Eraser size={20} className=\"text-black\" />\n          </CustomButton>\n          <CustomButton\n            variant=\"ghost\"\n            className=\"w-8 h-8 p-0 min-w-0 mb-1 hover:bg-gray-200\"\n            onClick={clearCanvas}\n            title=\"Clear Canvas\"\n          >\n            <Square size={20} className=\"text-black\" />\n          </CustomButton>\n          <CustomButton\n            variant=\"ghost\"\n            className=\"w-8 h-8 p-0 min-w-0 mb-1 bg-green-100 hover:bg-green-200\"\n            onClick={handleSave}\n            title=\"Save Image\"\n          >\n            <Save size={20} className=\"text-green-700\" />\n          </CustomButton>\n        </div>\n        <div\n          ref={canvasContainerRef}\n          className=\"flex-grow border border-gray-400\"\n          style={{\n            width: `${canvasVisibleWidth}px`,\n            height: `${dimensions.height - (isMobile ? 130 : 108)}px`,\n            overflow: \"hidden\",\n          }}\n        >\n          <canvas\n            ref={canvasRef}\n            width={canvasWidth}\n            height={canvasHeight}\n            onMouseDown={startDrawing}\n            onMouseMove={draw}\n            onMouseUp={() => setIsDrawing(false)}\n            onMouseOut={() => setIsDrawing(false)}\n            onTouchStart={startDrawing}\n            onTouchMove={draw}\n            onTouchEnd={() => setIsDrawing(false)}\n            onTouchCancel={() => setIsDrawing(false)}\n            style={{\n              cursor: cursorStyle(),\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"flex bg-gray-300 gap-3 p-2 border-t border-gray-400 overflow-x-auto\">\n        <div className=\"relative ml-2\">\n          <CustomButton\n            variant=\"ghost\"\n            className={`${isMobile ? \"w-6 h-6\" : \"w-8 h-8\"} p-0 min-w-0 relative overflow-hidden border-2 border-gray-400 transition-all duration-200\n              ${showColorPicker ? \"border-2 border-blue-500 scale-110 shadow-md\" : \"\"}`}\n            onClick={toggleColorPicker}\n            title=\"Custom Color\"\n          >\n            <div className=\"w-full h-full bg-gradient-to-br from-red-500 via-green-500 to-blue-500\" />\n            <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-70\">\n              <span className=\"text-xs font-bold\">+</span>\n            </div>\n          </CustomButton>\n          <input\n            ref={colorPickerRef}\n            type=\"color\"\n            value={color}\n            onChange={(e) => handleColorChange(e.target.value)}\n            className=\"absolute opacity-0 pointer-events-none\"\n            style={{ top: 0, left: 0, width: \"1px\", height: \"1px\" }}\n          />\n          <div\n            className={`${isMobile ? \"w-6 h-6\" : \"w-8 h-8\"} border-2 border-gray-400 mt-1`}\n            style={{ backgroundColor: color }}\n            title={`Current Color: ${color}`}\n          />\n        </div>\n        <div className=\"grid grid-rows-2 grid-flow-col gap-2 justify-center items-center\">\n          {colorPalette &&\n            colorPalette.map((c) => (\n              <CustomButton\n                key={c}\n                variant=\"ghost\"\n                className={`${isMobile ? \"w-6 h-6\" : \"w-8 h-8\"} p-0 min-w-0 transition-all duration-200\n                ${color === c ? \"border-4 border-blue-500 scale-110 shadow-md\" : \"\"}`}\n                onClick={() => handleColorChange(c)}\n                title={c}\n              >\n                <div style={{ backgroundColor: c }} className=\"w-full h-full\" />\n              </CustomButton>\n            ))}\n        </div>\n      </div>\n      <div className=\"bg-gray-300 px-2 py-1.5 text-sm border-t border-gray-400 flex flex-wrap items-center\">\n        <div\n          className={`${isMobile ? \"w-full\" : \"flex-grow\"} truncate text-black`}\n        >\n          {statusText}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/ms-paint.tsx"
    },
    {
      "path": "src\\nuvyxui\\components\\ms-paint.tsx",
      "content": "\"use client\";\nimport React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Pencil, Eraser, Square, Save, Menu } from \"lucide-react\";\n\nexport interface MSpaintProps {\n  width?: number;\n  height?: number;\n  canvasWidth?: number;\n  canvasHeight?: number;\n  title?: string;\n  menuItems?: string[];\n  className?: string;\n  style?: React.CSSProperties;\n  colorPalette?: string[];\n  brushSize?: number;\n  eraserSize?: number;\n  onSave?: (canvas: HTMLCanvasElement) => void;\n}\n\ninterface CustomButtonProps {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: () => void;\n  title?: string;\n  variant?: \"default\" | \"ghost\";\n}\n\nconst CustomButton: React.FC<CustomButtonProps> = ({\n  children,\n  className = \"\",\n  onClick,\n  title = \"\",\n  variant = \"default\",\n}) => {\n  const variantStyles =\n    variant === \"ghost\"\n      ? \"hover:bg-gray-200 hover:text-gray-900\"\n      : \"bg-gray-200 text-gray-900 hover:bg-gray-300\";\n  return (\n    <button\n      className={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 disabled:opacity-50 disabled:cursor-not-allowed ${variantStyles} ${className}`}\n      onClick={onClick}\n      title={title}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst DEFAULT_COLORS = [\n  \"#000000\",\n  \"#FFFFFF\",\n  \"#FF0000\",\n  \"#00FF00\",\n  \"#0000FF\",\n  \"#FFFF00\",\n  \"#00FFFF\",\n  \"#FF00FF\",\n  \"#FFA500\",\n  \"#800080\",\n  \"#A52A2A\",\n  \"#808080\",\n];\n\nexport default function MSpaint({\n  width = 800,\n  height = 500,\n  canvasWidth = 2000,\n  canvasHeight = 2000,\n  title = \"untitled - Paint\",\n  menuItems = [\"File\", \"Edit\", \"View\", \"Image\", \"Options\", \"Help\"],\n  className = \"\",\n  style = {},\n  colorPalette = DEFAULT_COLORS,\n  brushSize = 2,\n  eraserSize = 20,\n  onSave,\n}: MSpaintProps) {\n  const backgroundColor = \"#FFFFFF\";\n  const defaultStatusMessage = \"For Help, click Help Topics on the Help Menu.\";\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const downloadLinkRef = useRef<HTMLAnchorElement>(null);\n  const colorPickerRef = useRef<HTMLInputElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastPosition, setLastPosition] = useState({ x: 0, y: 0 });\n  const [color, setColor] = useState(\"#000000\");\n  const [tool, setTool] = useState(\"brush\");\n  const [dimensions, setDimensions] = useState({ width, height });\n  const [dragState, setDragState] = useState({\n    isDragging: false,\n    offset: { x: 0, y: 0 },\n  });\n  const [statusText, setStatusText] = useState(defaultStatusMessage);\n  const [saveCount, setSaveCount] = useState(0);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  const isMobile = dimensions.width < 640;\n  const draggable = !isMobile;\n  const showWindowControls = !isMobile;\n  const canvasVisibleWidth = dimensions.width - (isMobile ? 52 : 76);\n\n  const cursorStyle = useCallback(() => {\n    if (tool === \"eraser\") {\n      return \"url(\\\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='white' stroke='black' stroke-width='1'><circle cx='12' cy='12' r='10'/></svg>\\\") 12 12, auto\";\n    } else {\n      const isLightColor = (() => {\n        const r = parseInt(color.slice(1, 3), 16);\n        const g = parseInt(color.slice(3, 5), 16);\n        const b = parseInt(color.slice(5, 7), 16);\n        return (0.299 * r + 0.587 * g + 0.114 * b) / 255 > 0.7;\n      })();\n\n      const encodedSVG = encodeURIComponent(`\n        <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'>\n          <circle cx='8' cy='8' r='6' fill='${color}' ${isLightColor ? 'stroke=\"black\" stroke-width=\"1\"' : \"\"} />\n        </svg>\n      `);\n      return `url(\"data:image/svg+xml;utf8,${encodedSVG}\") 8 8, crosshair`;\n    }\n  }, [tool, color]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n    if (context && canvas) {\n      context.fillStyle = backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (containerRef.current) {\n        const parentWidth =\n          containerRef.current.parentElement?.clientWidth || window.innerWidth;\n        const parentHeight = window.innerHeight;\n        setDimensions({\n          width:\n            parentWidth < 768\n              ? parentWidth > 20\n                ? parentWidth - 20\n                : parentWidth\n              : width,\n          height:\n            parentWidth < 768 ? Math.min(parentHeight - 100, height) : height,\n        });\n      }\n    };\n\n    handleResize();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [width, height]);\n\n  useEffect(() => {\n    if (!draggable) return;\n    const handleMouseMove = (e: MouseEvent) => {\n      if (dragState.isDragging) {\n        const left = e.clientX - dragState.offset.x;\n        const top = e.clientY - dragState.offset.y;\n        if (containerRef.current) {\n          containerRef.current.style.left = `${left}px`;\n          containerRef.current.style.top = `${top}px`;\n        }\n      }\n    };\n\n    const handleTouchMove = (e: TouchEvent) => {\n      if (dragState.isDragging && e.touches.length === 1) {\n        const touch = e.touches[0];\n        const left = touch.clientX - dragState.offset.x;\n        const top = touch.clientY - dragState.offset.y;\n        if (containerRef.current) {\n          containerRef.current.style.left = `${left}px`;\n          containerRef.current.style.top = `${top}px`;\n        }\n      }\n    };\n    const handleEnd = () => {\n      setDragState((prev) => ({ ...prev, isDragging: false }));\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleEnd);\n    document.addEventListener(\"touchmove\", handleTouchMove);\n    document.addEventListener(\"touchend\", handleEnd);\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleEnd);\n      document.removeEventListener(\"touchmove\", handleTouchMove);\n      document.removeEventListener(\"touchend\", handleEnd);\n    };\n  }, [draggable, dragState]);\n\n  useEffect(() => {\n    if (canvasContainerRef.current) {\n      canvasContainerRef.current.style.overflow = \"hidden\";\n    }\n  }, []);\n\n  const getCanvasScaleFactors = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { scaleX: 1, scaleY: 1 };\n    const rect = canvas.getBoundingClientRect();\n    return {\n      scaleX: canvas.width / rect.width,\n      scaleY: canvas.height / rect.height,\n    };\n  }, []);\n\n  const startDrawing = useCallback(\n    (\n      e:\n        | React.MouseEvent<HTMLCanvasElement>\n        | React.TouchEvent<HTMLCanvasElement>,\n    ) => {\n      const canvas = canvasRef.current;\n      const context = canvas?.getContext(\"2d\");\n      if (!context || !canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const { scaleX, scaleY } = getCanvasScaleFactors();\n\n      let clientX, clientY;\n      if (\"touches\" in e) {\n        if (e.touches.length !== 1) return;\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const x = (clientX - rect.left) * scaleX;\n      const y = (clientY - rect.top) * scaleY;\n      context.beginPath();\n      context.moveTo(x, y);\n      setLastPosition({ x, y });\n      setIsDrawing(true);\n    },\n    [getCanvasScaleFactors],\n  );\n\n  const draw = useCallback(\n    (\n      e:\n        | React.MouseEvent<HTMLCanvasElement>\n        | React.TouchEvent<HTMLCanvasElement>,\n    ) => {\n      if (!isDrawing) return;\n\n      const canvas = canvasRef.current;\n      const context = canvas?.getContext(\"2d\");\n      if (!context || !canvas) return;\n      const rect = canvas.getBoundingClientRect();\n      const { scaleX, scaleY } = getCanvasScaleFactors();\n      let clientX, clientY;\n      if (\"touches\" in e) {\n        e.preventDefault();\n        if (e.touches.length !== 1) return;\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const x = (clientX - rect.left) * scaleX;\n      const y = (clientY - rect.top) * scaleY;\n      context.beginPath();\n      context.moveTo(lastPosition.x, lastPosition.y);\n      context.lineTo(x, y);\n      context.strokeStyle = tool === \"eraser\" ? backgroundColor : color;\n      const currentToolSize = tool === \"eraser\" ? eraserSize : brushSize;\n      const lineWidth = currentToolSize * Math.max(scaleX, scaleY);\n      context.lineWidth = lineWidth;\n      context.lineCap = \"round\";\n      context.lineJoin = \"round\";\n      context.stroke();\n      setLastPosition({ x, y });\n    },\n    [\n      isDrawing,\n      lastPosition,\n      tool,\n      color,\n      brushSize,\n      eraserSize,\n      getCanvasScaleFactors,\n    ],\n  );\n\n  const startDragging = useCallback(\n    (\n      e: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>,\n    ) => {\n      if (!draggable) return;\n      let clientX, clientY;\n      if (\"touches\" in e) {\n        if (e.touches.length !== 1) return;\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      setDragState({\n        isDragging: true,\n        offset: {\n          x: clientX - (containerRef.current?.offsetLeft || 0),\n          y: clientY - (containerRef.current?.offsetTop || 0),\n        },\n      });\n    },\n    [draggable],\n  );\n\n  const updateStatus = useCallback((text: string, resetAfter = 3000) => {\n    setStatusText(text);\n    setTimeout(() => setStatusText(defaultStatusMessage), resetAfter);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (!canvasRef.current) return;\n    try {\n      if (onSave) {\n        onSave(canvasRef.current);\n      } else {\n        const fileName = `${title.replace(\" - Paint\", \"\")}_${saveCount}.png`;\n        setSaveCount((prev) => prev + 1);\n\n        const dataUrl = canvasRef.current.toDataURL(\"image/png\");\n        if (downloadLinkRef.current) {\n          downloadLinkRef.current.href = dataUrl;\n          downloadLinkRef.current.download = fileName;\n          downloadLinkRef.current.click();\n        }\n\n        updateStatus(`Image saved as ${fileName}`);\n      }\n    } catch (error) {\n      console.error(\"Error saving image:\", error);\n      updateStatus(\"Error saving image. Try again.\");\n    }\n  }, [title, saveCount, onSave, updateStatus]);\n\n  const clearCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext(\"2d\");\n    if (context && canvas) {\n      context.fillStyle = backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      updateStatus(\"Canvas cleared.\");\n    }\n  }, [updateStatus]);\n\n  const handleColorChange = useCallback(\n    (newColor: string) => {\n      setColor(newColor);\n      updateStatus(`Color selected: ${newColor}`, 2000);\n    },\n    [updateStatus],\n  );\n\n  const toggleColorPicker = useCallback(() => {\n    setShowColorPicker((prev) => {\n      const newState = !prev;\n      if (newState && colorPickerRef.current) {\n        setTimeout(() => colorPickerRef.current?.click(), 100);\n      }\n      return newState;\n    });\n  }, []);\n\n  return (\n    <div\n      ref={containerRef}\n      className={`absolute md:px-0 bg-gray-200 border-2 border-white shadow-md ${className}`}\n      style={{\n        width: `${dimensions.width}px`,\n        left: \"50%\",\n        top: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        maxWidth: \"100vw\",\n        ...style,\n      }}\n    >\n      <a ref={downloadLinkRef} style={{ display: \"none\" }} />\n      <div\n        className=\"bg-blue-900 text-white px-2 py-1 flex justify-between items-center\"\n        style={{ cursor: draggable ? \"move\" : \"default\" }}\n        onMouseDown={startDragging}\n        onTouchStart={startDragging}\n      >\n        <span className=\"truncate\">{title}</span>\n        {showWindowControls && (\n          <div className=\"flex gap-1\">\n            <CustomButton\n              variant=\"ghost\"\n              className=\"h-5 w-5 p-0 min-w-0 text-white hover:bg-blue-700\"\n            >\n              _\n            </CustomButton>\n            <CustomButton\n              variant=\"ghost\"\n              className=\"h-5 w-5 p-0 min-w-0 text-white hover:bg-blue-700\"\n            >\n              □\n            </CustomButton>\n            <CustomButton\n              variant=\"ghost\"\n              className=\"h-5 w-5 p-0 min-w-0 text-white hover:bg-blue-700\"\n            >\n              ×\n            </CustomButton>\n          </div>\n        )}\n      </div>\n\n      {menuItems && menuItems.length > 0 && (\n        <div className=\"relative bg-gray-300 px-2 py-1 text-sm\">\n          {isMobile ? (\n            <>\n              <CustomButton\n                onClick={() => setMenuOpen(!menuOpen)}\n                className=\"text-sm py-0.5 px-2 flex items-center\"\n              >\n                <Menu size={14} className=\"mr-1\" /> Menu\n              </CustomButton>\n\n              {menuOpen && (\n                <div className=\"absolute top-full left-0 z-10 bg-gray-300 shadow-md border border-gray-400 py-1 text-black\">\n                  {menuItems.map((item, index) => (\n                    <div\n                      key={index}\n                      className=\"px-4 py-2 hover:bg-gray-400 cursor-pointer text-black\"\n                      onClick={() => setMenuOpen(false)}\n                    >\n                      {item}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </>\n          ) : (\n            menuItems.map((item, index) => (\n              <span\n                key={index}\n                className=\"mr-4 px-2 py-0.5 hover:bg-gray-400 cursor-pointer rounded text-black\"\n              >\n                {item}\n              </span>\n            ))\n          )}\n        </div>\n      )}\n\n      <div className=\"flex\">\n        <div\n          className={`${isMobile ? \"w-10\" : \"w-12\"} bg-gray-300 p-1 border-r border-gray-400 flex flex-col items-center`}\n        >\n          <CustomButton\n            variant=\"ghost\"\n            className={`w-8 h-8 p-0 min-w-0 mb-1 ${tool === \"brush\" ? \"bg-blue-200 border-2 border-blue-600 shadow-lg\" : \"hover:bg-gray-200\"}`}\n            onClick={() => setTool(\"brush\")}\n            title=\"Brush Tool\"\n          >\n            <Pencil size={20} className=\"text-black\" />\n          </CustomButton>\n          <CustomButton\n            variant=\"ghost\"\n            className={`w-8 h-8 p-0 min-w-0 mb-1 ${tool === \"eraser\" ? \"bg-blue-200 border-2 border-blue-600 shadow-lg\" : \"hover:bg-gray-200\"}`}\n            onClick={() => setTool(\"eraser\")}\n            title=\"Eraser Tool\"\n          >\n            <Eraser size={20} className=\"text-black\" />\n          </CustomButton>\n          <CustomButton\n            variant=\"ghost\"\n            className=\"w-8 h-8 p-0 min-w-0 mb-1 hover:bg-gray-200\"\n            onClick={clearCanvas}\n            title=\"Clear Canvas\"\n          >\n            <Square size={20} className=\"text-black\" />\n          </CustomButton>\n          <CustomButton\n            variant=\"ghost\"\n            className=\"w-8 h-8 p-0 min-w-0 mb-1 bg-green-100 hover:bg-green-200\"\n            onClick={handleSave}\n            title=\"Save Image\"\n          >\n            <Save size={20} className=\"text-green-700\" />\n          </CustomButton>\n        </div>\n        <div\n          ref={canvasContainerRef}\n          className=\"flex-grow border border-gray-400\"\n          style={{\n            width: `${canvasVisibleWidth}px`,\n            height: `${dimensions.height - (isMobile ? 130 : 108)}px`,\n            overflow: \"hidden\",\n          }}\n        >\n          <canvas\n            ref={canvasRef}\n            width={canvasWidth}\n            height={canvasHeight}\n            onMouseDown={startDrawing}\n            onMouseMove={draw}\n            onMouseUp={() => setIsDrawing(false)}\n            onMouseOut={() => setIsDrawing(false)}\n            onTouchStart={startDrawing}\n            onTouchMove={draw}\n            onTouchEnd={() => setIsDrawing(false)}\n            onTouchCancel={() => setIsDrawing(false)}\n            style={{\n              cursor: cursorStyle(),\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"flex bg-gray-300 gap-3 p-2 border-t border-gray-400 overflow-x-auto\">\n        <div className=\"relative ml-2\">\n          <CustomButton\n            variant=\"ghost\"\n            className={`${isMobile ? \"w-6 h-6\" : \"w-8 h-8\"} p-0 min-w-0 relative overflow-hidden border-2 border-gray-400 transition-all duration-200\n              ${showColorPicker ? \"border-2 border-blue-500 scale-110 shadow-md\" : \"\"}`}\n            onClick={toggleColorPicker}\n            title=\"Custom Color\"\n          >\n            <div className=\"w-full h-full bg-gradient-to-br from-red-500 via-green-500 to-blue-500\" />\n            <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-70\">\n              <span className=\"text-xs font-bold\">+</span>\n            </div>\n          </CustomButton>\n          <input\n            ref={colorPickerRef}\n            type=\"color\"\n            value={color}\n            onChange={(e) => handleColorChange(e.target.value)}\n            className=\"absolute opacity-0 pointer-events-none\"\n            style={{ top: 0, left: 0, width: \"1px\", height: \"1px\" }}\n          />\n          <div\n            className={`${isMobile ? \"w-6 h-6\" : \"w-8 h-8\"} border-2 border-gray-400 mt-1`}\n            style={{ backgroundColor: color }}\n            title={`Current Color: ${color}`}\n          />\n        </div>\n        <div className=\"grid grid-rows-2 grid-flow-col gap-2 justify-center items-center\">\n          {colorPalette &&\n            colorPalette.map((c) => (\n              <CustomButton\n                key={c}\n                variant=\"ghost\"\n                className={`${isMobile ? \"w-6 h-6\" : \"w-8 h-8\"} p-0 min-w-0 transition-all duration-200\n                ${color === c ? \"border-4 border-blue-500 scale-110 shadow-md\" : \"\"}`}\n                onClick={() => handleColorChange(c)}\n                title={c}\n              >\n                <div style={{ backgroundColor: c }} className=\"w-full h-full\" />\n              </CustomButton>\n            ))}\n        </div>\n      </div>\n      <div className=\"bg-gray-300 px-2 py-1.5 text-sm border-t border-gray-400 flex flex-wrap items-center\">\n        <div\n          className={`${isMobile ? \"w-full\" : \"flex-grow\"} truncate text-black`}\n        >\n          {statusText}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}