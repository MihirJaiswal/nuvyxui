{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dynamic-ripple",
  "type": "registry:ui",
  "title": "Dynamic Ripple",
  "description": "A ripple effect component that follows the cursor and can be customized with various options.",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "src/nuvyxui/components/dynamic-ripple.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useRef, useEffect, useState, useMemo } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Drop {\n  x: number;\n  y: number;\n  radius: number;\n  maxRadius: number;\n  speed: number;\n  opacity: number;\n  color: string;\n}\n\nexport interface DynamicRippleProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  theme?: \"blue\" | \"purple\" | \"green\" | \"amber\" | \"rose\" | \"custom\";\n  customColors?: {\n    primary: string;\n    secondary: string;\n  };\n  intensity?: 1 | 2 | 3 | 4 | 5;\n  speed?: 1 | 2 | 3 | 4 | 5;\n  reactToCursor?: boolean;\n  autoAnimate?: boolean;\n  rounded?: \"none\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"full\";\n  gradientOverlay?: boolean;\n  children: React.ReactNode;\n}\n\nexport function DynamicRipple({\n  theme = \"blue\",\n  customColors,\n  intensity = 3,\n  speed = 3,\n  reactToCursor = true,\n  autoAnimate = true,\n  rounded = \"lg\",\n  gradientOverlay = true,\n  className,\n  children,\n  ...props\n}: DynamicRippleProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const animationRef = useRef<number>(0);\n  const dropsRef = useRef<Drop[]>([]);\n\n  const intensityFactors = useMemo(\n    () => ({\n      1: { size: 0.6, opacity: 0.3, count: 3 },\n      2: { size: 0.8, opacity: 0.4, count: 5 },\n      3: { size: 1.0, opacity: 0.5, count: 7 },\n      4: { size: 1.2, opacity: 0.6, count: 9 },\n      5: { size: 1.5, opacity: 0.7, count: 12 },\n    }),\n    [],\n  );\n\n  const speedFactors = useMemo(\n    () => ({\n      1: 0.5,\n      2: 0.75,\n      3: 1.0,\n      4: 1.25,\n      5: 1.5,\n    }),\n    [],\n  );\n\n  const themeColors = useMemo(\n    () => ({\n      blue: {\n        primary: \"rgba(59, 130, 246, 0.7)\",\n        secondary: \"rgba(6, 182, 212, 0.7)\",\n        overlay: \"from-blue-500/10 to-cyan-500/10\",\n      },\n      purple: {\n        primary: \"rgba(139, 92, 246, 0.7)\",\n        secondary: \"rgba(216, 180, 254, 0.7)\",\n        overlay: \"from-purple-500/10 to-pink-500/10\",\n      },\n      green: {\n        primary: \"rgba(16, 185, 129, 0.7)\",\n        secondary: \"rgba(110, 231, 183, 0.7)\",\n        overlay: \"from-green-500/10 to-emerald-500/10\",\n      },\n      amber: {\n        primary: \"rgba(245, 158, 11, 0.7)\",\n        secondary: \"rgba(252, 211, 77, 0.7)\",\n        overlay: \"from-amber-500/10 to-yellow-500/10\",\n      },\n      rose: {\n        primary: \"rgba(244, 63, 94, 0.7)\",\n        secondary: \"rgba(251, 113, 133, 0.7)\",\n        overlay: \"from-rose-500/10 to-pink-500/10\",\n      },\n      custom: {\n        primary: customColors?.primary || \"rgba(59, 130, 246, 0.7)\",\n        secondary: customColors?.secondary || \"rgba(6, 182, 212, 0.7)\",\n        overlay: \"from-gray-500/10 to-gray-400/10\",\n      },\n    }),\n    [customColors],\n  );\n\n  const currentTheme = themeColors[theme];\n\n  const roundedStyles = useMemo(\n    () => ({\n      none: \"rounded-none\",\n      sm: \"rounded-sm\",\n      md: \"rounded-md\",\n      lg: \"rounded-lg\",\n      xl: \"rounded-xl\",\n      full: \"rounded-full\",\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    const updateDimensions = () => {\n      if (!containerRef.current) return;\n\n      const { width, height } = containerRef.current.getBoundingClientRect();\n      setDimensions({ width, height });\n\n      if (canvasRef.current) {\n        canvasRef.current.width = width;\n        canvasRef.current.height = height;\n      }\n    };\n\n    updateDimensions();\n\n    const container = containerRef.current;\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    resizeObserver.observe(container);\n\n    return () => {\n      resizeObserver.disconnect();\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!canvasRef.current || !dimensions.width || !dimensions.height) return;\n\n    const currentIntensityFactors = intensityFactors[intensity];\n    const currentSpeedFactor = speedFactors[speed];\n\n    const createDrop = (x: number, y: number, userInitiated = false) => {\n      const maxRadius =\n        Math.min(dimensions.width, dimensions.height) *\n        0.3 *\n        currentIntensityFactors.size;\n\n      return {\n        x,\n        y,\n        radius: 0,\n        maxRadius,\n        speed: currentSpeedFactor * (userInitiated ? 1.5 : 1),\n        opacity: currentIntensityFactors.opacity * (userInitiated ? 1.2 : 1),\n        color:\n          Math.random() > 0.5 ? currentTheme.primary : currentTheme.secondary,\n      };\n    };\n\n    if (autoAnimate) {\n      const initialDrops = Array.from({\n        length: currentIntensityFactors.count,\n      }).map(() => {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n        return createDrop(x, y);\n      });\n\n      dropsRef.current = initialDrops;\n    }\n\n    const handlePointerMove = (e: MouseEvent | TouchEvent) => {\n      if (!reactToCursor || !containerRef.current) return;\n\n      const rect = containerRef.current.getBoundingClientRect();\n      let clientX, clientY;\n\n      if (\"touches\" in e) {\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const x = clientX - rect.left;\n      const y = clientY - rect.top;\n\n      dropsRef.current.push(createDrop(x, y, true));\n\n      if (dropsRef.current.length > 20) {\n        dropsRef.current = dropsRef.current.slice(-20);\n      }\n    };\n\n    const container = containerRef.current;\n    if (reactToCursor && container) {\n      container.addEventListener(\"mousemove\", handlePointerMove);\n      container.addEventListener(\"touchmove\", handlePointerMove);\n    }\n\n    return () => {\n      if (container) {\n        container.removeEventListener(\"mousemove\", handlePointerMove);\n        container.removeEventListener(\"touchmove\", handlePointerMove);\n      }\n    };\n  }, [\n    dimensions,\n    intensity,\n    speed,\n    reactToCursor,\n    autoAnimate,\n    currentTheme.primary,\n    currentTheme.secondary,\n    intensityFactors,\n    speedFactors,\n  ]);\n\n  useEffect(() => {\n    if (!canvasRef.current || !dimensions.width || !dimensions.height) return;\n\n    const ctx = canvasRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    const currentIntensityFactors = intensityFactors[intensity];\n    const currentSpeedFactor = speedFactors[speed];\n\n    const animate = () => {\n      ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n      dropsRef.current = dropsRef.current.filter((drop) => {\n        drop.radius += drop.speed;\n        ctx.beginPath();\n        ctx.arc(drop.x, drop.y, drop.radius, 0, Math.PI * 2);\n        ctx.strokeStyle = drop.color;\n        ctx.lineWidth = 2;\n        ctx.globalAlpha = Math.max(\n          0,\n          drop.opacity * (1 - drop.radius / drop.maxRadius),\n        );\n        ctx.stroke();\n        return drop.radius < drop.maxRadius;\n      });\n\n      if (autoAnimate && Math.random() < 0.05 * currentSpeedFactor) {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n\n        dropsRef.current.push({\n          x,\n          y,\n          radius: 0,\n          maxRadius:\n            Math.min(dimensions.width, dimensions.height) *\n            0.2 *\n            currentIntensityFactors.size,\n          speed: currentSpeedFactor,\n          opacity: currentIntensityFactors.opacity,\n          color:\n            Math.random() > 0.5 ? currentTheme.primary : currentTheme.secondary,\n        });\n      }\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [\n    dimensions,\n    intensity,\n    speed,\n    autoAnimate,\n    currentTheme.primary,\n    currentTheme.secondary,\n    intensityFactors,\n    speedFactors,\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative overflow-hidden\",\n        roundedStyles[rounded],\n        className,\n      )}\n      {...props}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full pointer-events-none\"\n      />\n      {gradientOverlay && (\n        <div\n          className={cn(\n            \"absolute inset-0 bg-gradient-to-br opacity-30 pointer-events-none\",\n            currentTheme.overlay,\n          )}\n        />\n      )}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/dynamic-ripple.tsx"
    },
    {
      "path": "src\\nuvyxui\\components\\dynamic-ripple.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useRef, useEffect, useState, useMemo } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Drop {\n  x: number;\n  y: number;\n  radius: number;\n  maxRadius: number;\n  speed: number;\n  opacity: number;\n  color: string;\n}\n\nexport interface DynamicRippleProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  theme?: \"blue\" | \"purple\" | \"green\" | \"amber\" | \"rose\" | \"custom\";\n  customColors?: {\n    primary: string;\n    secondary: string;\n  };\n  intensity?: 1 | 2 | 3 | 4 | 5;\n  speed?: 1 | 2 | 3 | 4 | 5;\n  reactToCursor?: boolean;\n  autoAnimate?: boolean;\n  rounded?: \"none\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"full\";\n  gradientOverlay?: boolean;\n  children: React.ReactNode;\n}\n\nexport function DynamicRipple({\n  theme = \"blue\",\n  customColors,\n  intensity = 3,\n  speed = 3,\n  reactToCursor = true,\n  autoAnimate = true,\n  rounded = \"lg\",\n  gradientOverlay = true,\n  className,\n  children,\n  ...props\n}: DynamicRippleProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const animationRef = useRef<number>(0);\n  const dropsRef = useRef<Drop[]>([]);\n\n  const intensityFactors = useMemo(\n    () => ({\n      1: { size: 0.6, opacity: 0.3, count: 3 },\n      2: { size: 0.8, opacity: 0.4, count: 5 },\n      3: { size: 1.0, opacity: 0.5, count: 7 },\n      4: { size: 1.2, opacity: 0.6, count: 9 },\n      5: { size: 1.5, opacity: 0.7, count: 12 },\n    }),\n    [],\n  );\n\n  const speedFactors = useMemo(\n    () => ({\n      1: 0.5,\n      2: 0.75,\n      3: 1.0,\n      4: 1.25,\n      5: 1.5,\n    }),\n    [],\n  );\n\n  const themeColors = useMemo(\n    () => ({\n      blue: {\n        primary: \"rgba(59, 130, 246, 0.7)\",\n        secondary: \"rgba(6, 182, 212, 0.7)\",\n        overlay: \"from-blue-500/10 to-cyan-500/10\",\n      },\n      purple: {\n        primary: \"rgba(139, 92, 246, 0.7)\",\n        secondary: \"rgba(216, 180, 254, 0.7)\",\n        overlay: \"from-purple-500/10 to-pink-500/10\",\n      },\n      green: {\n        primary: \"rgba(16, 185, 129, 0.7)\",\n        secondary: \"rgba(110, 231, 183, 0.7)\",\n        overlay: \"from-green-500/10 to-emerald-500/10\",\n      },\n      amber: {\n        primary: \"rgba(245, 158, 11, 0.7)\",\n        secondary: \"rgba(252, 211, 77, 0.7)\",\n        overlay: \"from-amber-500/10 to-yellow-500/10\",\n      },\n      rose: {\n        primary: \"rgba(244, 63, 94, 0.7)\",\n        secondary: \"rgba(251, 113, 133, 0.7)\",\n        overlay: \"from-rose-500/10 to-pink-500/10\",\n      },\n      custom: {\n        primary: customColors?.primary || \"rgba(59, 130, 246, 0.7)\",\n        secondary: customColors?.secondary || \"rgba(6, 182, 212, 0.7)\",\n        overlay: \"from-gray-500/10 to-gray-400/10\",\n      },\n    }),\n    [customColors],\n  );\n\n  const currentTheme = themeColors[theme];\n\n  const roundedStyles = useMemo(\n    () => ({\n      none: \"rounded-none\",\n      sm: \"rounded-sm\",\n      md: \"rounded-md\",\n      lg: \"rounded-lg\",\n      xl: \"rounded-xl\",\n      full: \"rounded-full\",\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    const updateDimensions = () => {\n      if (!containerRef.current) return;\n\n      const { width, height } = containerRef.current.getBoundingClientRect();\n      setDimensions({ width, height });\n\n      if (canvasRef.current) {\n        canvasRef.current.width = width;\n        canvasRef.current.height = height;\n      }\n    };\n\n    updateDimensions();\n\n    const container = containerRef.current;\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    resizeObserver.observe(container);\n\n    return () => {\n      resizeObserver.disconnect();\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!canvasRef.current || !dimensions.width || !dimensions.height) return;\n\n    const currentIntensityFactors = intensityFactors[intensity];\n    const currentSpeedFactor = speedFactors[speed];\n\n    const createDrop = (x: number, y: number, userInitiated = false) => {\n      const maxRadius =\n        Math.min(dimensions.width, dimensions.height) *\n        0.3 *\n        currentIntensityFactors.size;\n\n      return {\n        x,\n        y,\n        radius: 0,\n        maxRadius,\n        speed: currentSpeedFactor * (userInitiated ? 1.5 : 1),\n        opacity: currentIntensityFactors.opacity * (userInitiated ? 1.2 : 1),\n        color:\n          Math.random() > 0.5 ? currentTheme.primary : currentTheme.secondary,\n      };\n    };\n\n    if (autoAnimate) {\n      const initialDrops = Array.from({\n        length: currentIntensityFactors.count,\n      }).map(() => {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n        return createDrop(x, y);\n      });\n\n      dropsRef.current = initialDrops;\n    }\n\n    const handlePointerMove = (e: MouseEvent | TouchEvent) => {\n      if (!reactToCursor || !containerRef.current) return;\n\n      const rect = containerRef.current.getBoundingClientRect();\n      let clientX, clientY;\n\n      if (\"touches\" in e) {\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const x = clientX - rect.left;\n      const y = clientY - rect.top;\n\n      dropsRef.current.push(createDrop(x, y, true));\n\n      if (dropsRef.current.length > 20) {\n        dropsRef.current = dropsRef.current.slice(-20);\n      }\n    };\n\n    const container = containerRef.current;\n    if (reactToCursor && container) {\n      container.addEventListener(\"mousemove\", handlePointerMove);\n      container.addEventListener(\"touchmove\", handlePointerMove);\n    }\n\n    return () => {\n      if (container) {\n        container.removeEventListener(\"mousemove\", handlePointerMove);\n        container.removeEventListener(\"touchmove\", handlePointerMove);\n      }\n    };\n  }, [\n    dimensions,\n    intensity,\n    speed,\n    reactToCursor,\n    autoAnimate,\n    currentTheme.primary,\n    currentTheme.secondary,\n    intensityFactors,\n    speedFactors,\n  ]);\n\n  useEffect(() => {\n    if (!canvasRef.current || !dimensions.width || !dimensions.height) return;\n\n    const ctx = canvasRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    const currentIntensityFactors = intensityFactors[intensity];\n    const currentSpeedFactor = speedFactors[speed];\n\n    const animate = () => {\n      ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n      dropsRef.current = dropsRef.current.filter((drop) => {\n        drop.radius += drop.speed;\n        ctx.beginPath();\n        ctx.arc(drop.x, drop.y, drop.radius, 0, Math.PI * 2);\n        ctx.strokeStyle = drop.color;\n        ctx.lineWidth = 2;\n        ctx.globalAlpha = Math.max(\n          0,\n          drop.opacity * (1 - drop.radius / drop.maxRadius),\n        );\n        ctx.stroke();\n        return drop.radius < drop.maxRadius;\n      });\n\n      if (autoAnimate && Math.random() < 0.05 * currentSpeedFactor) {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n\n        dropsRef.current.push({\n          x,\n          y,\n          radius: 0,\n          maxRadius:\n            Math.min(dimensions.width, dimensions.height) *\n            0.2 *\n            currentIntensityFactors.size,\n          speed: currentSpeedFactor,\n          opacity: currentIntensityFactors.opacity,\n          color:\n            Math.random() > 0.5 ? currentTheme.primary : currentTheme.secondary,\n        });\n      }\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [\n    dimensions,\n    intensity,\n    speed,\n    autoAnimate,\n    currentTheme.primary,\n    currentTheme.secondary,\n    intensityFactors,\n    speedFactors,\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative overflow-hidden\",\n        roundedStyles[rounded],\n        className,\n      )}\n      {...props}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full pointer-events-none\"\n      />\n      {gradientOverlay && (\n        <div\n          className={cn(\n            \"absolute inset-0 bg-gradient-to-br opacity-30 pointer-events-none\",\n            currentTheme.overlay,\n          )}\n        />\n      )}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\lib\\utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nuvyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nuvyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nuvyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}