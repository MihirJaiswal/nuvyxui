{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "matrix-code-rain",
  "type": "registry:ui",
  "title": "Matrix Code Rain",
  "description": "A matrix code rain that that provide several effects.",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "src/nuvyxui/components/matrix-code-rain.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useRef } from \"react\";\n\ntype MatrixCodeRainProps = {\n  color?: string;\n  charset?: string;\n  fontSize?: number;\n  fps?: number;\n  opacity?: number;\n  fullScreen?: boolean;\n  width?: string;\n  height?: string;\n};\n\nexport const MatrixCodeRain = ({\n  color = \"#00ff00\",\n  charset = \"0123#!$^&456789ABCDEFRLY\",\n  fontSize = 16,\n  fps = 20,\n  opacity = 0.05,\n  fullScreen = false,\n  width = \"100%\",\n  height = \"400px\",\n}: MatrixCodeRainProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number | null>(null);\n  const particlesRef = useRef<number[]>([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    let w = 0,\n      h = 0;\n    let lastFrameTime = 0;\n    const frameInterval = 1000 / fps;\n\n    const resize = () => {\n      const container = canvas.parentElement;\n      if (!container) return;\n\n      if (fullScreen) {\n        w = canvas.width = window.innerWidth;\n        h = canvas.height = window.innerHeight;\n      } else {\n        w = canvas.width = container.clientWidth;\n        h = canvas.height = container.clientHeight;\n      }\n\n      particlesRef.current = new Array(Math.ceil(w / fontSize)).fill(0);\n    };\n\n    const random = (items: string) =>\n      items[Math.floor(Math.random() * items.length)];\n\n    const draw = (timestamp: number) => {\n      if (timestamp - lastFrameTime >= frameInterval) {\n        ctx.fillStyle = `rgba(0,0,0,${opacity})`;\n        ctx.fillRect(0, 0, w, h);\n        ctx.fillStyle = color;\n        ctx.font = `${fontSize}px monospace`;\n\n        for (let i = 0; i < particlesRef.current.length; i++) {\n          const v = particlesRef.current[i];\n          ctx.fillText(random(charset), i * fontSize, v);\n          particlesRef.current[i] =\n            v >= h || v >= 10000 * Math.random() ? 0 : v + fontSize;\n        }\n\n        lastFrameTime = timestamp;\n      }\n\n      animationRef.current = requestAnimationFrame(draw);\n    };\n\n    const handleResize = () => resize();\n\n    window.addEventListener(\"resize\", handleResize);\n    resize();\n    animationRef.current = requestAnimationFrame(draw);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [color, charset, fontSize, fps, opacity, fullScreen]);\n\n  return (\n    <div\n      className={cn(\"relative overflow-hidden\")}\n      style={{\n        width: fullScreen ? \"100vw\" : width,\n        height: fullScreen ? \"100vh\" : height,\n      }}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"block\"\n        style={{\n          position: fullScreen ? \"fixed\" : \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: fullScreen ? -1 : \"auto\",\n        }}\n      />\n    </div>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/matrix-code-rain.tsx"
    },
    {
      "path": "src\\nuvyxui\\components\\matrix-code-rain.tsx",
      "content": "\"use client\";\nimport { cn } from \"@/lib/utils\";\nimport React, { useEffect, useRef } from \"react\";\n\ntype MatrixCodeRainProps = {\n  color?: string;\n  charset?: string;\n  fontSize?: number;\n  fps?: number;\n  opacity?: number;\n  fullScreen?: boolean;\n  width?: string;\n  height?: string;\n};\n\nexport const MatrixCodeRain = ({\n  color = \"#00ff00\",\n  charset = \"0123#!$^&456789ABCDEFRLY\",\n  fontSize = 16,\n  fps = 20,\n  opacity = 0.05,\n  fullScreen = false,\n  width = \"100%\",\n  height = \"400px\",\n}: MatrixCodeRainProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number | null>(null);\n  const particlesRef = useRef<number[]>([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    let w = 0,\n      h = 0;\n    let lastFrameTime = 0;\n    const frameInterval = 1000 / fps;\n\n    const resize = () => {\n      const container = canvas.parentElement;\n      if (!container) return;\n\n      if (fullScreen) {\n        w = canvas.width = window.innerWidth;\n        h = canvas.height = window.innerHeight;\n      } else {\n        w = canvas.width = container.clientWidth;\n        h = canvas.height = container.clientHeight;\n      }\n\n      particlesRef.current = new Array(Math.ceil(w / fontSize)).fill(0);\n    };\n\n    const random = (items: string) =>\n      items[Math.floor(Math.random() * items.length)];\n\n    const draw = (timestamp: number) => {\n      if (timestamp - lastFrameTime >= frameInterval) {\n        ctx.fillStyle = `rgba(0,0,0,${opacity})`;\n        ctx.fillRect(0, 0, w, h);\n        ctx.fillStyle = color;\n        ctx.font = `${fontSize}px monospace`;\n\n        for (let i = 0; i < particlesRef.current.length; i++) {\n          const v = particlesRef.current[i];\n          ctx.fillText(random(charset), i * fontSize, v);\n          particlesRef.current[i] =\n            v >= h || v >= 10000 * Math.random() ? 0 : v + fontSize;\n        }\n\n        lastFrameTime = timestamp;\n      }\n\n      animationRef.current = requestAnimationFrame(draw);\n    };\n\n    const handleResize = () => resize();\n\n    window.addEventListener(\"resize\", handleResize);\n    resize();\n    animationRef.current = requestAnimationFrame(draw);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [color, charset, fontSize, fps, opacity, fullScreen]);\n\n  return (\n    <div\n      className={cn(\"relative overflow-hidden\")}\n      style={{\n        width: fullScreen ? \"100vw\" : width,\n        height: fullScreen ? \"100vh\" : height,\n      }}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"block\"\n        style={{\n          position: fullScreen ? \"fixed\" : \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          zIndex: fullScreen ? -1 : \"auto\",\n        }}\n      />\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\lib\\utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"https://nuvyxui.vercel.app\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nuvyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nuvyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nuvyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}