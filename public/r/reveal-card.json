{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reveal-card",
  "type": "registry:ui",
  "title": "Reveal Card",
  "description": "A reveal card that that provide several effects.",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "registry/ui/reveal-card.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Image from \"next/image\";\n\ninterface CardProps {\n  coverImage: string;\n  titleImage: string;\n  characterImage: string;\n  width?: number;\n  height?: number;\n  hoverRotation?: number;\n  titleTranslateY?: number;\n  characterTranslateY?: number;\n  characterTranslateZ?: number;\n  alt?: {\n    cover?: string;\n    title?: string;\n    character?: string;\n  };\n  animation?: {\n    duration?: number;\n    delay?: number;\n  };\n  priority?: boolean;\n  threshold?: number;\n  className?: string;\n}\n\nconst RevealCard: React.FC<CardProps> = ({\n  coverImage,\n  titleImage,\n  characterImage,\n  width = 266,\n  height = 400,\n  hoverRotation = 25,\n  titleTranslateY = -50,\n  characterTranslateY = -15,\n  characterTranslateZ = 100,\n  alt = {\n    cover: \"Cover Image\",\n    title: \"Title\",\n    character: \"Character\",\n  },\n  animation = {\n    duration: 500,\n    delay: 0,\n  },\n  priority = false,\n  threshold = 0.3,\n  className = \"\",\n}) => {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [hasBeenRevealed, setHasBeenRevealed] = useState(false);\n\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    checkMobile();\n    window.addEventListener(\"resize\", checkMobile);\n\n    const currentRef = cardRef.current;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n          if (!hasBeenRevealed) {\n            setIsRevealed(true);\n            setHasBeenRevealed(true);\n          }\n        } else {\n          setIsVisible(false);\n        }\n      },\n      { threshold },\n    );\n\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return () => {\n      window.removeEventListener(\"resize\", checkMobile);\n      if (currentRef) observer.unobserve(currentRef);\n    };\n  }, [threshold, hasBeenRevealed]);\n\n  const handleCardClick = () => {\n    setIsRevealed(!isRevealed);\n    setHasBeenRevealed(true);\n  };\n\n  const animationStyle = {\n    transitionDuration: `${animation.duration}ms`,\n    transitionDelay: `${animation.delay}ms`,\n  };\n\n  const shouldReveal = isMobile\n    ? isRevealed\n    : isRevealed || (!hasBeenRevealed && isVisible);\n\n  const mobileRevealClass =\n    isMobile && shouldReveal\n      ? \"[transform:perspective(900px)_translateY(-5%)_rotateX(25deg)_translateZ(0)] shadow-xl\"\n      : \"\";\n\n  const characterRevealClass =\n    isMobile && shouldReveal\n      ? \"opacity-100 [transform:translate3d(0,-25%,100px)]\"\n      : \"\";\n\n  const titleRevealClass =\n    isMobile && shouldReveal ? \"[transform:translate3d(0,-50px,100px)]\" : \"\";\n\n  const desktopHoverClass = !isMobile\n    ? \"group-hover:[transform:perspective(900px)_translateY(-5%)_rotateX(25deg)_translateZ(0)] group-hover:shadow-xl\"\n    : \"\";\n\n  const characterHoverClass = !isMobile\n    ? \"group-hover:opacity-100 group-hover:[transform:translate3d(0,-25%,100px)]\"\n    : \"\";\n\n  const titleHoverClass = !isMobile\n    ? \"group-hover:[transform:translate3d(0,-50px,100px)]\"\n    : \"\";\n\n  return (\n    <div\n      ref={cardRef}\n      className={`group relative flex justify-center items-end no-underline perspective-[2500px] cursor-pointer border p-0 mx-3 ${className}`}\n      style={{\n        width: `${width}px`,\n        height: `${height}px`,\n      }}\n      onClick={handleCardClick}\n    >\n      <div className=\"absolute inset-0 overflow-hidden z-0\">\n        <div\n          className={`absolute inset-0 transition-all duration-500 ${desktopHoverClass} ${mobileRevealClass}`}\n          style={\n            {\n              ...animationStyle,\n              \"--hover-rotation\": `${hoverRotation}deg`,\n            } as React.CSSProperties\n          }\n        >\n          <Image\n            src={coverImage}\n            alt={alt.cover || \"Cover Image\"}\n            fill\n            className=\"object-cover\"\n            loading={priority ? \"eager\" : \"lazy\"}\n            priority={priority}\n          />\n\n          <div\n            className=\"absolute bottom-0 left-0 w-full h-10 bg-gradient-to-b from-transparent to-black/30\"\n            style={animationStyle}\n          ></div>\n        </div>\n      </div>\n\n      <div className=\"absolute inset-0 z-10 pointer-events-none\">\n        <Image\n          src={characterImage}\n          alt={alt.character || \"Character\"}\n          fill\n          className={`object-cover opacity-0 transition-all duration-500 ${characterHoverClass} ${\n            shouldReveal ? characterRevealClass : \"\"\n          }`}\n          style={\n            {\n              ...animationStyle,\n              \"--character-translate-y\": `${characterTranslateY}%`,\n              \"--character-translate-z\": `${characterTranslateZ}px`,\n            } as React.CSSProperties\n          }\n          loading={priority ? \"eager\" : \"lazy\"}\n          priority={priority}\n        />\n      </div>\n\n      <div className=\"relative z-20 w-full\">\n        <Image\n          src={titleImage}\n          alt={alt.title || \"Title\"}\n          width={500}\n          height={500}\n          className={`w-full transition-transform duration-500 ${titleHoverClass} ${\n            shouldReveal ? titleRevealClass : \"\"\n          }`}\n          style={\n            {\n              ...animationStyle,\n              \"--title-translate-y\": `${titleTranslateY}px`,\n              \"--title-translate-z\": `${characterTranslateZ}px`,\n            } as React.CSSProperties\n          }\n          loading={priority ? \"eager\" : \"lazy\"}\n          priority={priority}\n        />\n      </div>\n\n      {isMobile && (\n        <div className=\"absolute bottom-2 right-2 z-30 w-8 h-8 rounded-full bg-white/20 flex items-center justify-center transition-opacity duration-300\">\n          <span className=\"text-white text-xs\">{isRevealed ? \"Ã—\" : \"+\"}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RevealCard;\n",
      "type": "registry:ui",
      "target": "components/ui/reveal-card.tsx"
    },
    {
      "path": "registry\\ui\\reveal-card.tsx",
      "content": "\"use client\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Image from \"next/image\";\n\ninterface CardProps {\n  coverImage: string;\n  titleImage: string;\n  characterImage: string;\n  width?: number;\n  height?: number;\n  hoverRotation?: number;\n  titleTranslateY?: number;\n  characterTranslateY?: number;\n  characterTranslateZ?: number;\n  alt?: {\n    cover?: string;\n    title?: string;\n    character?: string;\n  };\n  animation?: {\n    duration?: number;\n    delay?: number;\n  };\n  priority?: boolean;\n  threshold?: number;\n  className?: string;\n}\n\nconst RevealCard: React.FC<CardProps> = ({\n  coverImage,\n  titleImage,\n  characterImage,\n  width = 266,\n  height = 400,\n  hoverRotation = 25,\n  titleTranslateY = -50,\n  characterTranslateY = -15,\n  characterTranslateZ = 100,\n  alt = {\n    cover: \"Cover Image\",\n    title: \"Title\",\n    character: \"Character\",\n  },\n  animation = {\n    duration: 500,\n    delay: 0,\n  },\n  priority = false,\n  threshold = 0.3,\n  className = \"\",\n}) => {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  const [isRevealed, setIsRevealed] = useState(false);\n  const [hasBeenRevealed, setHasBeenRevealed] = useState(false);\n\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    checkMobile();\n    window.addEventListener(\"resize\", checkMobile);\n\n    const currentRef = cardRef.current;\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n          if (!hasBeenRevealed) {\n            setIsRevealed(true);\n            setHasBeenRevealed(true);\n          }\n        } else {\n          setIsVisible(false);\n        }\n      },\n      { threshold },\n    );\n\n    if (currentRef) {\n      observer.observe(currentRef);\n    }\n\n    return () => {\n      window.removeEventListener(\"resize\", checkMobile);\n      if (currentRef) observer.unobserve(currentRef);\n    };\n  }, [threshold, hasBeenRevealed]);\n\n  const handleCardClick = () => {\n    setIsRevealed(!isRevealed);\n    setHasBeenRevealed(true);\n  };\n\n  const animationStyle = {\n    transitionDuration: `${animation.duration}ms`,\n    transitionDelay: `${animation.delay}ms`,\n  };\n\n  const shouldReveal = isMobile\n    ? isRevealed\n    : isRevealed || (!hasBeenRevealed && isVisible);\n\n  const mobileRevealClass =\n    isMobile && shouldReveal\n      ? \"[transform:perspective(900px)_translateY(-5%)_rotateX(25deg)_translateZ(0)] shadow-xl\"\n      : \"\";\n\n  const characterRevealClass =\n    isMobile && shouldReveal\n      ? \"opacity-100 [transform:translate3d(0,-25%,100px)]\"\n      : \"\";\n\n  const titleRevealClass =\n    isMobile && shouldReveal ? \"[transform:translate3d(0,-50px,100px)]\" : \"\";\n\n  const desktopHoverClass = !isMobile\n    ? \"group-hover:[transform:perspective(900px)_translateY(-5%)_rotateX(25deg)_translateZ(0)] group-hover:shadow-xl\"\n    : \"\";\n\n  const characterHoverClass = !isMobile\n    ? \"group-hover:opacity-100 group-hover:[transform:translate3d(0,-25%,100px)]\"\n    : \"\";\n\n  const titleHoverClass = !isMobile\n    ? \"group-hover:[transform:translate3d(0,-50px,100px)]\"\n    : \"\";\n\n  return (\n    <div\n      ref={cardRef}\n      className={`group relative flex justify-center items-end no-underline perspective-[2500px] cursor-pointer border p-0 mx-3 ${className}`}\n      style={{\n        width: `${width}px`,\n        height: `${height}px`,\n      }}\n      onClick={handleCardClick}\n    >\n      <div className=\"absolute inset-0 overflow-hidden z-0\">\n        <div\n          className={`absolute inset-0 transition-all duration-500 ${desktopHoverClass} ${mobileRevealClass}`}\n          style={\n            {\n              ...animationStyle,\n              \"--hover-rotation\": `${hoverRotation}deg`,\n            } as React.CSSProperties\n          }\n        >\n          <Image\n            src={coverImage}\n            alt={alt.cover || \"Cover Image\"}\n            fill\n            className=\"object-cover\"\n            loading={priority ? \"eager\" : \"lazy\"}\n            priority={priority}\n          />\n\n          <div\n            className=\"absolute bottom-0 left-0 w-full h-10 bg-gradient-to-b from-transparent to-black/30\"\n            style={animationStyle}\n          ></div>\n        </div>\n      </div>\n\n      <div className=\"absolute inset-0 z-10 pointer-events-none\">\n        <Image\n          src={characterImage}\n          alt={alt.character || \"Character\"}\n          fill\n          className={`object-cover opacity-0 transition-all duration-500 ${characterHoverClass} ${\n            shouldReveal ? characterRevealClass : \"\"\n          }`}\n          style={\n            {\n              ...animationStyle,\n              \"--character-translate-y\": `${characterTranslateY}%`,\n              \"--character-translate-z\": `${characterTranslateZ}px`,\n            } as React.CSSProperties\n          }\n          loading={priority ? \"eager\" : \"lazy\"}\n          priority={priority}\n        />\n      </div>\n\n      <div className=\"relative z-20 w-full\">\n        <Image\n          src={titleImage}\n          alt={alt.title || \"Title\"}\n          width={500}\n          height={500}\n          className={`w-full transition-transform duration-500 ${titleHoverClass} ${\n            shouldReveal ? titleRevealClass : \"\"\n          }`}\n          style={\n            {\n              ...animationStyle,\n              \"--title-translate-y\": `${titleTranslateY}px`,\n              \"--title-translate-z\": `${characterTranslateZ}px`,\n            } as React.CSSProperties\n          }\n          loading={priority ? \"eager\" : \"lazy\"}\n          priority={priority}\n        />\n      </div>\n\n      {isMobile && (\n        <div className=\"absolute bottom-2 right-2 z-30 w-8 h-8 rounded-full bg-white/20 flex items-center justify-center transition-opacity duration-300\">\n          <span className=\"text-white text-xs\">{isRevealed ? \"Ã—\" : \"+\"}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RevealCard;\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}