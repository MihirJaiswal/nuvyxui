{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "lamp-heading",
  "type": "registry:ui",
  "title": "Lamp Heading",
  "description": "A heading component with a lamp effect.",
  "dependencies": [
    "framer-motion",
    ".."
  ],
  "files": [
    {
      "path": "registry/ui/lamp-heading.tsx",
      "content": "\"use client\"\nimport { useRef, useEffect, useState, useCallback, useMemo } from \"react\"\nimport { motion } from \"framer-motion\"\nimport { cn } from \"../../lib/utils\"\n\ninterface Particle {\n  id: number\n  x: number\n  y: number\n  size: number\n  opacity: number\n  speed: number\n  baseOpacity: number\n  phase: number\n  phaseMultiplier: number\n  speedMultiplier: number\n}\n\ninterface LampHeadingProps {\n  text: string\n  className?: string\n  gradientColors?: {\n    from: string\n    via?: string\n    to: string\n  }\n  lineHeight?: number\n  lampHeight?: number\n  glowIntensity?: number\n  glowSize?: number\n  animationSpeed?: number\n  direction?: \"above\" | \"below\"\n  showParticles?: boolean\n  showLightRays?: boolean\n  interactive?: boolean\n  textSize?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\"\n  pulseEffect?: boolean\n  particleCount?: number\n}\n\nexport const LampHeading = ({\n  text,\n  className,\n  gradientColors = {\n    from: \"#FF33C7\",\n    via: \"#CD35FF\",\n    to: \"#4533F7\",\n  },\n  lineHeight = 4,\n  lampHeight = 80,\n  glowIntensity = 1.0,\n  glowSize = 30,\n  animationSpeed = 4,\n  direction = \"below\",\n  showParticles = true,\n  showLightRays = false,\n  interactive = true,\n  textSize = \"4xl\",\n  pulseEffect = true,\n  particleCount = 8, \n}: LampHeadingProps) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const [particles, setParticles] = useState<Particle[]>([])\n  const [isHovered, setIsHovered] = useState(false)\n  const animationFrameRef = useRef<number | null>(null)\n  const lastUpdateRef = useRef<number>(0)\n  const particleUpdateInterval = useRef<number>(100)\n\n  const textSizeClasses = {\n    sm: \"text-sm\",\n    md: \"text-base\",\n    lg: \"text-lg\",\n    xl: \"text-xl\",\n    \"2xl\": \"text-2xl\",\n    \"3xl\": \"text-3xl\",\n    \"4xl\": \"text-4xl\",\n  }\n\n  const gradientString = useMemo(() => \n    gradientColors.via\n      ? `linear-gradient(90deg, ${gradientColors.from}, ${gradientColors.via}, ${gradientColors.to})`\n      : `linear-gradient(90deg, ${gradientColors.from}, ${gradientColors.to})`,\n    [gradientColors.from, gradientColors.via, gradientColors.to]\n  )\n\n  const generateParticles = useCallback(() => {\n    if (!showParticles) return []\n    \n    const newParticles: Particle[] = []\n    for (let i = 0; i < particleCount; i++) {\n      const baseOpacity = Math.random() * 0.25 + 0.35 \n      const phase = Math.random() * Math.PI * 2\n      newParticles.push({\n        id: i,\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        size: Math.random() * 1.2 + 0.6,\n        opacity: baseOpacity,\n        speed: Math.random() * 1.0 + 0.2, \n        baseOpacity,\n        phase,\n        phaseMultiplier: Math.random() * 0.1 + 0.05, \n        speedMultiplier: Math.random() * 0.008 + 0.004, \n      })\n    }\n    return newParticles\n  }, [showParticles, particleCount])\n\n  useEffect(() => {\n    setParticles(generateParticles())\n  }, [generateParticles])\n\n  useEffect(() => {\n    if (!showParticles || particles.length === 0) return\n\n    const animateParticles = (currentTime: number) => {\n      if (currentTime - lastUpdateRef.current < particleUpdateInterval.current) {\n        animationFrameRef.current = requestAnimationFrame(animateParticles)\n        return\n      }\n      \n      lastUpdateRef.current = currentTime\n      const time = currentTime * 0.0005 \n      \n      setParticles(prev => {\n        const updated = []\n        for (let i = 0; i < prev.length; i++) {\n          const particle = prev[i]\n          const newX = (particle.x + particle.speedMultiplier * 100) % 100\n          const newOpacity = particle.baseOpacity + Math.sin(time + particle.phase) * particle.phaseMultiplier\n          \n          updated.push({\n            ...particle,\n            x: newX,\n            opacity: Math.max(0.15, Math.min(0.6, newOpacity))\n          })\n        }\n        return updated\n      })\n      \n      animationFrameRef.current = requestAnimationFrame(animateParticles)\n    }\n\n    animationFrameRef.current = requestAnimationFrame(animateParticles)\n    \n    return () => {\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current)\n      }\n    }\n  }, [particles.length, showParticles])\n\n  const flowAnimation = useMemo(() => ({\n    animate: {\n      backgroundPosition: [\"0% 50%\", \"200% 50%\"],\n      transition: {\n        duration: animationSpeed,\n        ease: \"linear\",\n        repeat: Number.POSITIVE_INFINITY,\n      },\n    },\n  }), [animationSpeed])\n\n  const pulseAnimation = useMemo(() => \n    pulseEffect\n      ? {\n          animate: {\n            scale: [1, 1.02, 1],\n            opacity: [0.95, 1, 0.95],\n            transition: {\n              duration: animationSpeed * 0.6,\n              ease: \"easeInOut\",\n              repeat: Number.POSITIVE_INFINITY,\n            },\n          },\n        }\n      : {},\n    [pulseEffect, animationSpeed]\n  )\n\n  const lightRayVariants = useMemo(() => ({\n    animate: {\n      opacity: [0.6, 1, 0.6],\n      scaleY: [0.95, 1.15, 0.95],\n      scaleX: [1, 1.05, 1],\n      transition: {\n        duration: animationSpeed * 1.2,\n        ease: \"easeInOut\",\n        repeat: Number.POSITIVE_INFINITY,\n        staggerChildren: 0.1,\n      },\n    },\n  }), [animationSpeed])\n\n  const particleElements = useMemo(() => {\n    if (!showParticles) return null\n    \n    return particles.map((particle) => (\n      <div\n        key={particle.id}\n        className=\"absolute rounded-full pointer-events-none\"\n        style={{\n          left: `${particle.x}%`,\n          top: `${particle.y}%`,\n          width: `${particle.size}px`,\n          height: `${particle.size}px`,\n          background: gradientString,\n          opacity: particle.opacity,\n          filter: \"blur(0.3px)\",\n          boxShadow: `0 0 ${particle.size * 1.5}px ${gradientColors.from}30`, \n          transform: `translate3d(0, 0, 0)`, \n          willChange: 'transform, opacity', \n          animation: `particleFloat-${particle.id} ${2.5 + particle.id * 0.2}s ease-in-out infinite`,\n        }}\n      />\n    ))\n  }, [particles, showParticles, gradientString, gradientColors.from])\n\n  useEffect(() => {\n    if (!showParticles) return\n\n    const style = document.createElement('style')\n    style.textContent = particles.map(particle => `\n      @keyframes particleFloat-${particle.id} {\n        0%, 100% { transform: translate3d(0, 0, 0) scale(1); }\n        33% { transform: translate3d(${Math.sin(particle.id) * 3}px, ${direction === \"below\" ? -8 : 8}px, 0) scale(1.05); }\n        66% { transform: translate3d(${Math.sin(particle.id + 1) * 2}px, ${direction === \"below\" ? -4 : 4}px, 0) scale(0.95); }\n      }\n    `).join('')\n    \n    document.head.appendChild(style)\n    \n    return () => {\n      document.head.removeChild(style)\n    }\n  }, [particles, showParticles, direction])\n\n  return (\n    <motion.div\n      ref={containerRef}\n      className={cn(\"flex flex-col items-start relative overflow-visible\", className)}\n      onMouseEnter={() => interactive && setIsHovered(true)}\n      onMouseLeave={() => interactive && setIsHovered(false)}\n    >\n      <h2 className={cn(\"font-bold tracking-wide relative z-20 mb-3\", className, textSizeClasses[textSize])}>{text}</h2>\n      <div className=\"w-full relative\">\n        {showParticles && (\n          <div\n            className=\"absolute pointer-events-none\"\n            style={{\n              width: \"100%\",\n              height: `${lampHeight + lineHeight + 20}px`,\n              top: direction === \"below\" ? \"0\" : `-${lampHeight + 10}px`,\n              transform: 'translate3d(0, 0, 0)', \n              willChange: 'contents',\n            }}\n          >\n            {particleElements}\n          </div>\n        )}\n\n        {showLightRays && (\n          <div className=\"absolute inset-0 pointer-events-none\">\n            {[...Array(8)].map((_, i) => ( \n              <motion.div\n                key={i}\n                variants={lightRayVariants}\n                animate=\"animate\"\n                className=\"absolute\"\n                style={{\n                  left: `${3 + i * 12}%`,\n                  width: `${1.5 + Math.sin(i * 0.5) * 0.8}px`,\n                  height: `${lampHeight * 0.6 + Math.sin(i) * 15}px`,\n                  background:\n                    direction === \"below\"\n                      ? `linear-gradient(to bottom,\n         ${gradientColors.from}DD 0%,\n         ${gradientColors.from}BB 8%,\n         ${gradientColors.via || gradientColors.from}99 18%,\n         ${gradientColors.to}77 30%,\n         ${gradientColors.to}44 45%,\n         ${gradientColors.to}22 65%,\n         ${gradientColors.to}11 80%,\n         ${gradientColors.to}05 90%,\n         transparent 100%)`\n                      : `linear-gradient(to top,\n         ${gradientColors.from}DD 0%,\n         ${gradientColors.from}BB 8%,\n         ${gradientColors.via || gradientColors.from}99 18%,\n         ${gradientColors.to}77 30%,\n         ${gradientColors.to}44 45%,\n         ${gradientColors.to}22 65%,\n         ${gradientColors.to}11 80%,\n         ${gradientColors.to}05 90%,\n         transparent 100%)`,\n                  top: direction === \"below\" ? `${lineHeight}px` : \"auto\",\n                  bottom: direction === \"above\" ? `${lineHeight}px` : \"auto\",\n                  transformOrigin: direction === \"below\" ? \"top\" : \"bottom\",\n                  borderRadius: \"50px\",\n                  filter: `blur(${0.4 + Math.sin(i) * 0.2}px)`,\n                  opacity: 0.6 + Math.sin(i * 0.3) * 0.15,\n                  transform: 'translate3d(0, 0, 0)',\n                  willChange: 'transform, opacity',\n                }}\n                transition={{\n                  delay: i * 0.04,\n                }}\n              />\n            ))}\n            {[...Array(4)].map((_, i) => ( \n              <motion.div\n                key={`soft-${i}`}\n                variants={lightRayVariants}\n                animate=\"animate\"\n                className=\"absolute\"\n                style={{\n                  left: `${8 + i * 20}%`,\n                  width: `${2.0 + Math.cos(i * 0.7) * 1.0}px`,\n                  height: `${lampHeight * 0.4 + Math.cos(i) * 12}px`,\n                  background:\n                    direction === \"below\"\n                      ? `linear-gradient(to bottom,\n         ${gradientColors.from}88 0%,\n         ${gradientColors.via || gradientColors.from}66 15%,\n         ${gradientColors.to}44 35%,\n         ${gradientColors.to}22 55%,\n         ${gradientColors.to}11 75%,\n         transparent 100%)`\n                      : `linear-gradient(to top,\n         ${gradientColors.from}88 0%,\n         ${gradientColors.via || gradientColors.from}66 15%,\n         ${gradientColors.to}44 35%,\n         ${gradientColors.to}22 55%,\n         ${gradientColors.to}11 75%,\n         transparent 100%)`,\n                  top: direction === \"below\" ? `${lineHeight}px` : \"auto\",\n                  bottom: direction === \"above\" ? `${lineHeight}px` : \"auto\",\n                  transformOrigin: direction === \"below\" ? \"top\" : \"bottom\",\n                  borderRadius: \"50px\",\n                  filter: `blur(${1.2 + Math.cos(i) * 0.4}px)`,\n                  opacity: 0.3 + Math.cos(i * 0.4) * 0.15,\n                  transform: 'translate3d(0, 0, 0)',\n                  willChange: 'transform, opacity',\n                }}\n                transition={{\n                  delay: i * 0.08,\n                  duration: animationSpeed * 1.2,\n                }}\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Main Lamp Cone - Outer Layer */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: `${lampHeight}px`,\n            background:\n              direction === \"below\"\n                ? `radial-gradient(ellipse 120% 100% at center top,\n                   ${gradientColors.from}BB 0%,\n                   ${gradientColors.via || gradientColors.from}99 10%,\n                   ${gradientColors.to}77 25%,\n                   ${gradientColors.to}55 45%,\n                   ${gradientColors.to}33 65%,\n                   ${gradientColors.to}22 80%,\n                   ${gradientColors.to}11 90%,\n                   transparent 100%)`\n                : `radial-gradient(ellipse 120% 100% at center bottom,\n                   ${gradientColors.from}BB 0%,\n                   ${gradientColors.via || gradientColors.from}99 10%,\n                   ${gradientColors.to}77 25%,\n                   ${gradientColors.to}55 45%,\n                   ${gradientColors.to}33 65%,\n                   ${gradientColors.to}22 80%,\n                   ${gradientColors.to}11 90%,\n                   transparent 100%)`,\n            top: direction === \"below\" ? `${lineHeight}px` : \"auto\",\n            bottom: direction === \"above\" ? `${lineHeight}px` : \"auto\",\n            left: 0,\n            filter: `blur(${glowSize * 1.2}px)`,\n            opacity: glowIntensity * 0.8 * (isHovered ? 1.4 : 1),\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform, opacity',\n          }}\n        />\n\n        {/* Middle Lamp Cone */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          style={{\n            position: \"absolute\",\n            width: \"95%\",\n            height: `${lampHeight * 0.8}px`,\n            background:\n              direction === \"below\"\n                ? `radial-gradient(ellipse 110% 100% at center top,\n                   ${gradientColors.from}DD 0%,\n                   ${gradientColors.via || gradientColors.from}BB 15%,\n                   ${gradientColors.to}99 35%,\n                   ${gradientColors.to}66 55%,\n                   ${gradientColors.to}44 75%,\n                   ${gradientColors.to}22 90%,\n                   transparent 100%)`\n                : `radial-gradient(ellipse 110% 100% at center bottom,\n                   ${gradientColors.from}DD 0%,\n                   ${gradientColors.via || gradientColors.from}BB 15%,\n                   ${gradientColors.to}99 35%,\n                   ${gradientColors.to}66 55%,\n                   ${gradientColors.to}44 75%,\n                   ${gradientColors.to}22 90%,\n                   transparent 100%)`,\n            top: direction === \"below\" ? `${lineHeight}px` : \"auto\",\n            bottom: direction === \"above\" ? `${lineHeight}px` : \"auto\",\n            left: \"2.5%\",\n            filter: `blur(${glowSize * 0.8}px)`,\n            opacity: glowIntensity * 0.9 * (isHovered ? 1.3 : 1),\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform, opacity',\n          }}\n          transition={{\n            duration: animationSpeed * 0.9,\n          }}\n        />\n\n        {/* Inner Lamp Cone */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          style={{\n            position: \"absolute\",\n            width: \"85%\",\n            height: `${lampHeight * 0.6}px`,\n            background:\n              direction === \"below\"\n                ? `radial-gradient(ellipse 100% 100% at center top,\n                   ${gradientColors.from}EE 0%,\n                   ${gradientColors.via || gradientColors.from}DD 20%,\n                   ${gradientColors.to}BB 40%,\n                   ${gradientColors.to}88 60%,\n                   ${gradientColors.to}55 80%,\n                   transparent 100%)`\n                : `radial-gradient(ellipse 100% 100% at center bottom,\n                   ${gradientColors.from}EE 0%,\n                   ${gradientColors.via || gradientColors.from}DD 20%,\n                   ${gradientColors.to}BB 40%,\n                   ${gradientColors.to}88 60%,\n                   ${gradientColors.to}55 80%,\n                   transparent 100%)`,\n            top: direction === \"below\" ? `${lineHeight}px` : \"auto\",\n            bottom: direction === \"above\" ? `${lineHeight}px` : \"auto\",\n            left: \"7.5%\",\n            filter: `blur(${glowSize * 0.4}px)`,\n            opacity: glowIntensity * 1.0 * (isHovered ? 1.2 : 1),\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform, opacity',\n          }}\n          transition={{\n            duration: animationSpeed * 1.1,\n          }}\n        />\n\n        {/* Core Light Beam */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          className=\"hidden dark:block opacity-20\"\n          style={{\n            position: \"absolute\",\n            width: \"70%\",\n            height: `${lampHeight * 0.2}px`,\n            background:\n              direction === \"below\"\n                ? `linear-gradient(to bottom,\n           ${gradientColors.from}FF 0%,\n           ${gradientColors.via || gradientColors.from}EE 10%,\n           ${gradientColors.to}DD 25%,\n           ${gradientColors.to}BB 45%,\n           ${gradientColors.to}88 65%,\n           ${gradientColors.to}44 85%,\n           transparent 100%)`\n                : `linear-gradient(to top,\n           ${gradientColors.from}FF 0%,\n           ${gradientColors.via || gradientColors.from}EE 10%,\n           ${gradientColors.to}DD 25%,\n           ${gradientColors.to}BB 45%,\n           ${gradientColors.to}88 65%,\n           ${gradientColors.to}44 85%,\n           transparent 100%)`,\n            top: direction === \"below\" ? `${lineHeight}px` : \"auto\",\n            bottom: direction === \"above\" ? `${lineHeight}px` : \"auto\",\n            left: \"15%\",\n            filter: `blur(${glowSize * 0.2}px)`,\n            opacity: glowIntensity * 1.0 * (isHovered ? 1.1 : 1),\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform, opacity',\n          }}\n          transition={{\n            duration: animationSpeed * 1.3,\n          }}\n        />\n\n        {/* Animated Gradient Underline - The Light Source */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          {...pulseAnimation}\n          style={{\n            height: `${lineHeight}px`,\n            background: gradientString,\n            backgroundSize: \"200% 100%\",\n            borderRadius: \"50px\",\n            boxShadow: `\n              0 0 ${glowSize}px ${gradientColors.from}80, \n              0 0 ${glowSize * 2}px ${gradientColors.to}40,\n              0 0 ${glowSize * 3}px ${gradientColors.from}20\n            `,\n            position: \"relative\",\n            zIndex: 10,\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform, opacity',\n          }}\n          className=\"w-full\"\n        />\n\n        {/* Subtle Inner Highlight on Underline */}\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          className=\"bg-gradient-to-b from-white via-white/50 to-transparent\"\n          style={{\n            height: `${Math.max(1, lineHeight * 0.1)}px`,\n            width: \"98%\",\n            position: \"absolute\",\n            top: `0px`,\n            left: \"1%\",\n            right: \"0\",\n            zIndex: 15,\n            borderRadius: \"100px\",\n            backgroundSize: \"200% 100%\",\n            transform: 'translate3d(0, 0, 0)',\n            willChange: 'transform',\n          }}\n          transition={{\n            duration: animationSpeed * 0.8,\n          }}\n        />\n      </div>\n\n      {/* Ambient Background Glow */}\n      <div\n        className=\"absolute pointer-events-none\"\n        style={{\n          width: \"100%\",\n          height: `${lampHeight + lineHeight + 60}px`,\n          left: \"0%\",\n          top: direction === \"below\"\n            ? `${textSize === \"sm\" ? 32 :\n              textSize === \"md\" ? 36 :\n                textSize === \"lg\" ? 40 :\n                  textSize === \"xl\" ? 40 :\n                    textSize === \"2xl\" ? 44 :\n                      textSize === \"3xl\" ? 48 : 52}px`\n            : `-${lampHeight + (textSize === \"sm\" ? 32 :\n              textSize === \"md\" ? 28 :\n                textSize === \"lg\" ? 24 :\n                  textSize === \"xl\" ? 24 :\n                    textSize === \"2xl\" ? 16 :\n                      textSize === \"3xl\" ? 12 : 8)}px`,\n          background:\n            direction === \"below\"\n              ? `radial-gradient(ellipse 100% 70% at center ${lineHeight}px,\n           ${gradientColors.from}25 0%,\n           ${gradientColors.via || gradientColors.to}20 25%,\n           ${gradientColors.to}15 50%,\n           ${gradientColors.to}10 70%,\n           ${gradientColors.to}05 85%,\n           transparent 100%)`\n              : `radial-gradient(ellipse 100% 70% at center calc(100% - ${lineHeight + 10}px),\n           ${gradientColors.from}25 0%,\n           ${gradientColors.via || gradientColors.to}20 25%,\n           ${gradientColors.to}15 50%,\n           ${gradientColors.to}10 70%,\n           ${gradientColors.to}05 85%,\n           transparent 100%)`,\n          opacity: isHovered ? 0.9 : 0.6,\n          transition: \"opacity 0.4s ease\",\n          transform: 'translate3d(0, 0, 0)',\n          willChange: 'opacity',\n        }}\n      />\n    </motion.div>\n  )\n}\n\nexport default LampHeading",
      "type": "registry:ui",
      "target": "components/ui/lamp-heading.tsx"
    }
  ]
}