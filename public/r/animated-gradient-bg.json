{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-gradient-bg",
  "type": "registry:ui",
  "title": "Animated Gradient Background",
  "description": "A dynamic animated gradient background component that supports various gradient patterns and animations.",
  "dependencies": [
    "motion",
    "framer-motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "src/nuvyxui/components/animated-gradient-bg.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useMemo } from \"react\";\nimport { motion, Variants, HTMLMotionProps } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface AnimatedGradientBgProps {\n  children?: React.ReactNode;\n  className?: string;\n  colors?: string[];\n  speed?: number;\n  blur?: number;\n  pattern?: \"radial\" | \"linear\" | \"conic\" | \"mesh\" | \"noise\" | \"waves\";\n  intensity?: number;\n  opacity?: number;\n  size?: \"sm\" | \"md\" | \"lg\" | \"full\" | number;\n  position?: \"fixed\" | \"absolute\" | \"relative\";\n  zIndex?: number;\n  animate?: boolean;\n  as?: \"div\" | \"section\" | \"article\" | \"main\" | \"aside\" | \"header\" | \"footer\";\n  onClick?: () => void;\n}\n\ntype PatternType = AnimatedGradientBgProps[\"pattern\"];\n\nconst getSizeStyles = (\n  size: AnimatedGradientBgProps[\"size\"],\n): React.CSSProperties => {\n  if (typeof size === \"number\") {\n    return { width: `${size}px`, height: `${size}px` };\n  }\n  switch (size) {\n    case \"sm\":\n      return { width: \"300px\", height: \"300px\" };\n    case \"md\":\n      return { width: \"500px\", height: \"500px\" };\n    case \"lg\":\n      return { width: \"800px\", height: \"800px\" };\n    default:\n      return { width: \"100%\", height: \"100%\" };\n  }\n};\n\nfunction getGradientPattern(\n  pattern: PatternType,\n  colors: string[],\n  intensity: number,\n): string {\n  const list = colors.join(\", \");\n  switch (pattern) {\n    case \"radial\":\n      return `radial-gradient(circle at center, ${list})`;\n    case \"linear\":\n      return `linear-gradient(45deg, ${list})`;\n    case \"conic\":\n      return `conic-gradient(from 0deg at center, ${list})`;\n    case \"mesh\":\n      return `\n        radial-gradient(circle at 20% 20%, ${colors[0]} 0, transparent ${100 * intensity}px),\n        radial-gradient(circle at 80% 10%, ${colors[1]} 0, transparent ${150 * intensity}px),\n        radial-gradient(circle at 50% 50%, ${colors[2]} 0, transparent ${120 * intensity}px)\n      `;\n    case \"noise\":\n      return `linear-gradient(45deg, ${list})`;\n    case \"waves\":\n      return `\n        repeating-linear-gradient(45deg, ${colors[0]} 0, transparent 40%),\n        repeating-linear-gradient(-45deg, ${colors[1]} 0, transparent 50%)\n      `;\n    default:\n      return `radial-gradient(circle at center, ${list})`;\n  }\n}\n\nconst initialColors = [\"#4f46e5\", \"#ec4899\", \"#8b5cf6\", \"#06b6d4\"];\n\nexport const AnimatedGradientBg: React.FC<AnimatedGradientBgProps> = ({\n  children,\n  className,\n  colors = initialColors,\n  speed = 1,\n  blur = 60,\n  pattern = \"radial\",\n  intensity = 1,\n  opacity = 0.8,\n  size = \"full\",\n  position = \"absolute\",\n  zIndex = -1,\n  animate = true,\n  as = \"div\",\n  onClick,\n}: AnimatedGradientBgProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const gradient = useMemo(\n    () => getGradientPattern(pattern, colors, intensity),\n    [pattern, colors, intensity],\n  );\n\n  const variants: Variants = useMemo(\n    () => ({\n      animate: {\n        backgroundPosition: [\"0% 0%\", \"100% 100%\"],\n        transition: {\n          duration: 10 / speed,\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        },\n      },\n      static: { backgroundPosition: \"0% 0%\" },\n    }),\n    [speed],\n  );\n\n  const commonProps: HTMLMotionProps<\"div\"> = {\n    ref: containerRef,\n    className: cn(\"animated-gradient-bg overflow-hidden\", className),\n    onClick,\n    style: {\n      ...getSizeStyles(size),\n      position,\n      zIndex,\n      opacity,\n      backgroundImage: gradient,\n      backgroundSize: \"200% 200%\",\n      filter: `blur(${blur}px)`,\n    },\n    variants,\n    animate: animate ? \"animate\" : \"static\",\n  };\n\n  switch (as) {\n    case \"section\":\n      return (\n        <motion.section {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.section>\n      );\n    case \"article\":\n      return (\n        <motion.article {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.article>\n      );\n    case \"main\":\n      return (\n        <motion.main {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.main>\n      );\n    case \"aside\":\n      return (\n        <motion.aside {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.aside>\n      );\n    case \"header\":\n      return (\n        <motion.header {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.header>\n      );\n    case \"footer\":\n      return (\n        <motion.footer {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.footer>\n      );\n    default:\n      return (\n        <motion.div {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.div>\n      );\n  }\n};\nfunction renderNoisePattern(pattern: PatternType, patternIntensity: number) {\n  if (pattern === \"noise\") {\n    return (\n      <div\n        className=\"absolute inset-0 opacity-20 mix-blend-overlay\"\n        style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)'/%3E%3C/svg%3E\")`,\n          backgroundSize: `${100 * patternIntensity}px ${100 * patternIntensity}px`,\n        }}\n      />\n    );\n  }\n  return null;\n}\n",
      "type": "registry:ui",
      "target": "components/ui/animated-gradient-bg.tsx"
    },
    {
      "path": "src\\nuvyxui\\components\\animated-gradient-bg.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useMemo } from \"react\";\nimport { motion, Variants, HTMLMotionProps } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface AnimatedGradientBgProps {\n  children?: React.ReactNode;\n  className?: string;\n  colors?: string[];\n  speed?: number;\n  blur?: number;\n  pattern?: \"radial\" | \"linear\" | \"conic\" | \"mesh\" | \"noise\" | \"waves\";\n  intensity?: number;\n  opacity?: number;\n  size?: \"sm\" | \"md\" | \"lg\" | \"full\" | number;\n  position?: \"fixed\" | \"absolute\" | \"relative\";\n  zIndex?: number;\n  animate?: boolean;\n  as?: \"div\" | \"section\" | \"article\" | \"main\" | \"aside\" | \"header\" | \"footer\";\n  onClick?: () => void;\n}\n\ntype PatternType = AnimatedGradientBgProps[\"pattern\"];\n\nconst getSizeStyles = (\n  size: AnimatedGradientBgProps[\"size\"],\n): React.CSSProperties => {\n  if (typeof size === \"number\") {\n    return { width: `${size}px`, height: `${size}px` };\n  }\n  switch (size) {\n    case \"sm\":\n      return { width: \"300px\", height: \"300px\" };\n    case \"md\":\n      return { width: \"500px\", height: \"500px\" };\n    case \"lg\":\n      return { width: \"800px\", height: \"800px\" };\n    default:\n      return { width: \"100%\", height: \"100%\" };\n  }\n};\n\nfunction getGradientPattern(\n  pattern: PatternType,\n  colors: string[],\n  intensity: number,\n): string {\n  const list = colors.join(\", \");\n  switch (pattern) {\n    case \"radial\":\n      return `radial-gradient(circle at center, ${list})`;\n    case \"linear\":\n      return `linear-gradient(45deg, ${list})`;\n    case \"conic\":\n      return `conic-gradient(from 0deg at center, ${list})`;\n    case \"mesh\":\n      return `\n        radial-gradient(circle at 20% 20%, ${colors[0]} 0, transparent ${100 * intensity}px),\n        radial-gradient(circle at 80% 10%, ${colors[1]} 0, transparent ${150 * intensity}px),\n        radial-gradient(circle at 50% 50%, ${colors[2]} 0, transparent ${120 * intensity}px)\n      `;\n    case \"noise\":\n      return `linear-gradient(45deg, ${list})`;\n    case \"waves\":\n      return `\n        repeating-linear-gradient(45deg, ${colors[0]} 0, transparent 40%),\n        repeating-linear-gradient(-45deg, ${colors[1]} 0, transparent 50%)\n      `;\n    default:\n      return `radial-gradient(circle at center, ${list})`;\n  }\n}\n\nconst initialColors = [\"#4f46e5\", \"#ec4899\", \"#8b5cf6\", \"#06b6d4\"];\n\nexport const AnimatedGradientBg: React.FC<AnimatedGradientBgProps> = ({\n  children,\n  className,\n  colors = initialColors,\n  speed = 1,\n  blur = 60,\n  pattern = \"radial\",\n  intensity = 1,\n  opacity = 0.8,\n  size = \"full\",\n  position = \"absolute\",\n  zIndex = -1,\n  animate = true,\n  as = \"div\",\n  onClick,\n}: AnimatedGradientBgProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const gradient = useMemo(\n    () => getGradientPattern(pattern, colors, intensity),\n    [pattern, colors, intensity],\n  );\n\n  const variants: Variants = useMemo(\n    () => ({\n      animate: {\n        backgroundPosition: [\"0% 0%\", \"100% 100%\"],\n        transition: {\n          duration: 10 / speed,\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        },\n      },\n      static: { backgroundPosition: \"0% 0%\" },\n    }),\n    [speed],\n  );\n\n  const commonProps: HTMLMotionProps<\"div\"> = {\n    ref: containerRef,\n    className: cn(\"animated-gradient-bg overflow-hidden\", className),\n    onClick,\n    style: {\n      ...getSizeStyles(size),\n      position,\n      zIndex,\n      opacity,\n      backgroundImage: gradient,\n      backgroundSize: \"200% 200%\",\n      filter: `blur(${blur}px)`,\n    },\n    variants,\n    animate: animate ? \"animate\" : \"static\",\n  };\n\n  switch (as) {\n    case \"section\":\n      return (\n        <motion.section {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.section>\n      );\n    case \"article\":\n      return (\n        <motion.article {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.article>\n      );\n    case \"main\":\n      return (\n        <motion.main {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.main>\n      );\n    case \"aside\":\n      return (\n        <motion.aside {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.aside>\n      );\n    case \"header\":\n      return (\n        <motion.header {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.header>\n      );\n    case \"footer\":\n      return (\n        <motion.footer {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.footer>\n      );\n    default:\n      return (\n        <motion.div {...commonProps}>\n          {renderNoisePattern(pattern, intensity)}\n          {children}\n        </motion.div>\n      );\n  }\n};\nfunction renderNoisePattern(pattern: PatternType, patternIntensity: number) {\n  if (pattern === \"noise\") {\n    return (\n      <div\n        className=\"absolute inset-0 opacity-20 mix-blend-overlay\"\n        style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)'/%3E%3C/svg%3E\")`,\n          backgroundSize: `${100 * patternIntensity}px ${100 * patternIntensity}px`,\n        }}\n      />\n    );\n  }\n  return null;\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\lib\\utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nuvyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nuvyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nuvyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}