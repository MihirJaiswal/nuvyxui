{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animated-gradient-bg",
  "type": "registry:ui",
  "title": "Animated Gradient Background",
  "description": "A dynamic animated gradient background component that supports various gradient patterns and animations.",
  "dependencies": [
    "motion",
    "framer-motion",
    ".."
  ],
  "files": [
    {
      "path": "registry/ui/animated-gradient-bg.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useMemo } from \"react\";\nimport { motion, Variants, HTMLMotionProps } from \"framer-motion\";\nimport { cn } from \"../../lib/utils\";\n\nexport interface AnimatedGradientBgProps {\n  children?: React.ReactNode;\n  className?: string;\n  colors?: string[];\n  speed?: number;\n  blur?: number;\n  pattern?: \"radial\" | \"linear\" | \"conic\" | \"waves\";\n  intensity?: number;\n  opacity?: number;\n  size?: \"sm\" | \"md\" | \"lg\" | \"full\" | number;\n  position?: \"fixed\" | \"absolute\" | \"relative\";\n  zIndex?: number;\n  animate?: boolean;\n  as?: \"div\" | \"section\" | \"article\" | \"main\" | \"aside\" | \"header\" | \"footer\";\n  onClick?: () => void;\n}\n\ntype PatternType = AnimatedGradientBgProps[\"pattern\"];\n\nconst getSizeStyles = (\n  size: AnimatedGradientBgProps[\"size\"],\n): React.CSSProperties => {\n  if (typeof size === \"number\") {\n    return { width: `${size}px`, height: `${size}px` };\n  }\n  switch (size) {\n    case \"sm\":\n      return { width: \"300px\", height: \"300px\" };\n    case \"md\":\n      return { width: \"500px\", height: \"500px\" };\n    case \"lg\":\n      return { width: \"800px\", height: \"800px\" };\n    default:\n      return { width: \"100%\", height: \"100%\" };\n  }\n};\n\nfunction getGradientPattern(\n  pattern: PatternType,\n  colors: string[],\n  intensity: number,\n): string {\n  const list = colors.join(\", \");\n  switch (pattern) {\n    case \"radial\":\n      return `radial-gradient(circle at center, ${list})`;\n    case \"linear\":\n      return `linear-gradient(45deg, ${list})`;\n    case \"conic\":\n      return `conic-gradient(from 0deg at center, ${list})`;\n    case \"waves\":\n      return `\n        repeating-linear-gradient(45deg, ${colors[0]} 0, transparent 40%),\n        repeating-linear-gradient(-45deg, ${colors[1]} 0, transparent 50%)\n      `;\n    default:\n      return `radial-gradient(circle at center, ${list})`;\n  }\n}\n\nconst initialColors = [\"#4f46e5\", \"#ec4899\", \"#8b5cf6\", \"#06b6d4\"];\n\nexport const AnimatedGradientBg: React.FC<AnimatedGradientBgProps> = ({\n  children,\n  className,\n  colors = initialColors,\n  speed = 1,\n  blur = 60,\n  pattern = \"radial\",\n  intensity = 1,\n  opacity = 0.8,\n  size = \"full\",\n  position = \"absolute\",\n  zIndex = -1,\n  animate = true,\n  as = \"div\",\n  onClick,\n}: AnimatedGradientBgProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const gradient = useMemo(\n    () => getGradientPattern(pattern, colors, intensity),\n    [pattern, colors, intensity],\n  );\n\n  const variants: Variants = useMemo(\n    () => ({\n      animate: {\n        backgroundPosition: [\"0% 0%\", \"100% 100%\"],\n        transition: {\n          duration: 10 / speed,\n          ease: \"linear\",\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        },\n      },\n      static: { backgroundPosition: \"0% 0%\" },\n    }),\n    [speed],\n  );\n\n  const commonProps: HTMLMotionProps<\"div\"> = {\n    ref: containerRef,\n    className: cn(\"animated-gradient-bg overflow-hidden\", className),\n    onClick,\n    style: {\n      ...getSizeStyles(size),\n      position,\n      zIndex,\n      opacity,\n      backgroundImage: gradient,\n      backgroundSize: \"200% 200%\",\n      filter: `blur(${blur}px)`,\n    },\n    variants,\n    animate: animate ? \"animate\" : \"static\",\n  };\n\n  switch (as) {\n    case \"section\":\n      return (\n        <motion.section {...commonProps}>\n          {children}\n        </motion.section>\n      );\n    case \"article\":\n      return (\n        <motion.article {...commonProps}>\n          {children}\n        </motion.article>\n      );\n    case \"main\":\n      return (\n        <motion.main {...commonProps}>\n          {children}\n        </motion.main>\n      );\n    case \"aside\":\n      return (\n        <motion.aside {...commonProps}>\n          {children}\n        </motion.aside>\n      );\n    case \"header\":\n      return (\n        <motion.header {...commonProps}>\n          {children}\n        </motion.header>\n      );\n    case \"footer\":\n      return (\n        <motion.footer {...commonProps}>\n          {children}\n        </motion.footer>\n      );\n    default:\n      return (\n        <motion.div {...commonProps}>\n          {children}\n        </motion.div>\n      );\n  }\n};\n",
      "type": "registry:ui",
      "target": "components/ui/animated-gradient-bg.tsx"
    }
  ]
}