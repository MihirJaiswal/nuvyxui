{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "music-player-demo",
  "type": "registry:example",
  "title": "Music Player Demo",
  "description": "Example showing a music player.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://nuvyxui.vercel.app/r/music-player.json"
  ],
  "files": [
    {
      "path": "src/nuvyxui/demos/music-player-demo.tsx",
      "content": "import React from \"react\";\nimport { MusicPlayer } from \"@/nuvyxui/components/music-player\";\n\nexport default function MusicPlayerCardsDemo() {\n  const albums = [\n    {\n      theme: \"spotify\",\n      artwork: \"/assets/images/music-player/song.jpg\",\n      trackTitle: \"Blinding Lights\",\n      artist: \"The Weeknd\",\n      album: \"After Hours\",\n      initialTime: 30,\n      totalDuration: 194,\n    },\n  ];\n\n  return (\n    <div className=\"flex flex-col items-center w-full relative\">\n      {albums.map((album, index) => (\n        <div key={index} className=\"flex flex-col w-full max-w-xs\">\n          <MusicPlayer\n            theme={album.theme}\n            artwork={album.artwork}\n            trackTitle={album.trackTitle}\n            artist={album.artist}\n            album={album.album}\n            initialTime={album.initialTime}\n            totalDuration={album.totalDuration}\n            controls={{\n              shuffle: true,\n              repeat: true,\n              heart: true,\n            }}\n            className=\"rounded-xl\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/music-player-demo.tsx"
    },
    {
      "path": "src\\nuvyxui\\demos\\music-player-demo.tsx",
      "content": "import React from \"react\";\nimport { MusicPlayer } from \"@/nuvyxui/components/music-player\";\n\nexport default function MusicPlayerCardsDemo() {\n  const albums = [\n    {\n      theme: \"spotify\",\n      artwork: \"/assets/images/music-player/song.jpg\",\n      trackTitle: \"Blinding Lights\",\n      artist: \"The Weeknd\",\n      album: \"After Hours\",\n      initialTime: 30,\n      totalDuration: 194,\n    },\n  ];\n\n  return (\n    <div className=\"flex flex-col items-center w-full relative\">\n      {albums.map((album, index) => (\n        <div key={index} className=\"flex flex-col w-full max-w-xs\">\n          <MusicPlayer\n            theme={album.theme}\n            artwork={album.artwork}\n            trackTitle={album.trackTitle}\n            artist={album.artist}\n            album={album.album}\n            initialTime={album.initialTime}\n            totalDuration={album.totalDuration}\n            controls={{\n              shuffle: true,\n              repeat: true,\n              heart: true,\n            }}\n            className=\"rounded-xl\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\nuvyxui\\components\\music-player.tsx",
      "content": "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Play,\n  Pause,\n  SkipForward,\n  SkipBack,\n  Heart,\n  Repeat,\n  Shuffle,\n} from \"lucide-react\";\nimport Image from \"next/image\";\n\nexport interface MusicPlayerProps {\n  theme?: \"default\" | \"spotify\" | \"cosmic\" | \"nebula\" | string;\n  artwork?: string;\n  trackTitle?: string;\n  artist?: string;\n  album?: string;\n  initialTime?: number;\n  totalDuration?: number;\n  className?: string;\n  autoPlay?: boolean;\n  onPlayPause?: (isPlaying: boolean) => void;\n  onTimeChange?: (time: number) => void;\n  onTrackEnd?: () => void;\n  controls?: {\n    shuffle?: boolean;\n    repeat?: boolean;\n    heart?: boolean;\n  };\n}\n\nexport const MusicPlayer = ({\n  theme = \"default\",\n  artwork = \"/api/placeholder/400/400\",\n  trackTitle = \"undefined\",\n  artist = \"undefined\",\n  album = \"undefined\",\n  initialTime = 0,\n  totalDuration = 217,\n  className = \"\",\n  autoPlay = false,\n  onPlayPause,\n  onTimeChange,\n  onTrackEnd,\n  controls = {\n    shuffle: true,\n    repeat: true,\n    heart: true,\n  },\n}: MusicPlayerProps) => {\n  const [isPlaying, setIsPlaying] = useState(autoPlay);\n  const [currentTime, setCurrentTime] = useState(initialTime);\n  const [liked, setLiked] = useState(false);\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n\n    if (isPlaying) {\n      interval = setInterval(() => {\n        setCurrentTime((time) => {\n          if (time >= totalDuration) {\n            setIsPlaying(false);\n            if (onTrackEnd) onTrackEnd();\n            return 0;\n          }\n          const newTime = time + 1;\n          if (onTimeChange) onTimeChange(newTime);\n          return newTime;\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isPlaying, totalDuration, onTimeChange, onTrackEnd]);\n\n  const formatTime = (seconds: number) => {\n    const min = Math.floor(seconds / 60);\n    const sec = seconds % 60;\n    return `${min}:${sec < 10 ? \"0\" + sec : sec}`;\n  };\n\n  const togglePlay = () => {\n    const newPlayState = !isPlaying;\n    setIsPlaying(newPlayState);\n    if (onPlayPause) onPlayPause(newPlayState);\n  };\n\n  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    const progressBar = e.currentTarget;\n    const { left, width } = progressBar.getBoundingClientRect();\n    const clickPosition = e.clientX - left;\n    const percentage = clickPosition / width;\n    const newTime = Math.floor(totalDuration * percentage);\n\n    setCurrentTime(newTime);\n    if (onTimeChange) onTimeChange(newTime);\n  };\n\n  const toggleLike = () => {\n    setLiked(!liked);\n  };\n\n  const getThemeStyles = () => {\n    const baseStyles = \"transition-all duration-300\";\n    switch (theme) {\n      case \"spotify\":\n        return `\n          bg-white text-green-600 border-2 border-green-400\n          dark:bg-black dark:text-green-400 dark:border-green-400\n          ${baseStyles}\n        `\n          .replace(/\\s+/g, \" \")\n          .trim();\n\n      case \"cosmic\":\n        return `\n          bg-indigo-50 text-indigo-900 border border-indigo-200\n          dark:bg-gradient-to-br dark:from-indigo-950 dark:to-blue-950 dark:text-white dark:border-indigo-300\n          ${baseStyles}\n        `\n          .replace(/\\s+/g, \" \")\n          .trim();\n\n      case \"nebula\":\n        return `\n          bg-purple-100 text-purple-700 border border-purple-300\n          dark:bg-gradient-to-br dark:from-purple-900 dark:to-indigo-900\n          dark:text-purple-200 dark:border-purple-600\n          ${baseStyles}\n        `\n          .replace(/\\s+/g, \" \")\n          .trim();\n\n      default:\n        return `\n          bg-white text-zinc-900\n          dark:bg-zinc-900 dark:text-white\n          ${baseStyles}\n        `\n          .replace(/\\s+/g, \" \")\n          .trim();\n    }\n  };\n\n  const getThemeColor = () => {\n    switch (theme) {\n      case \"spotify\":\n        return \"bg-green-500\";\n      case \"cosmic\":\n        return \"bg-indigo-500\";\n      case \"nebula\":\n        return \"bg-purple-500\";\n      default:\n        return \"bg-white\";\n    }\n  };\n\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <div className={`${getThemeStyles()} ${className} overflow-hidden`}>\n      <div className=\"w-full h-44 relative\">\n        <Image\n          src={artwork}\n          alt={`${trackTitle} by ${artist}`}\n          width={400}\n          height={256}\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\"></div>\n      </div>\n      <div className=\"p-6 flex flex-col\">\n        <div className=\"flex items-start justify-between mb-6\">\n          <div>\n            <h1 className=\"text-xl font-bold mb-1\">{trackTitle}</h1>\n            <p className=\"text-sm opacity-70\">\n              {artist} â€¢ {album}\n            </p>\n          </div>\n          {controls.heart && (\n            <button\n              onClick={toggleLike}\n              aria-label=\"Like\"\n              className={`transition-colors hover:scale-105 ${\n                liked ? \"text-red-500\" : \"text-gray-400 hover:text-white\"\n              }`}\n            >\n              <Heart className={`h-6 w-6 ${liked ? \"fill-current\" : \"\"}`} />\n            </button>\n          )}\n        </div>\n        <div className=\"mb-2\">\n          <div\n            className=\"relative h-1 bg-gray-700 rounded-full overflow-hidden cursor-pointer\"\n            onClick={handleProgressClick}\n          >\n            <div\n              className={`absolute top-0 left-0 h-full ${getThemeColor()} rounded-full`}\n              style={{ width: `${(currentTime / totalDuration) * 100}%` }}\n            ></div>\n          </div>\n          <div className=\"flex justify-between mt-2\">\n            <span className=\"text-xs opacity-70\">\n              {formatTime(currentTime)}\n            </span>\n            <span className=\"text-xs opacity-70\">\n              {formatTime(totalDuration)}\n            </span>\n          </div>\n        </div>\n        <div className=\"flex flex-col gap-5\">\n          <div className=\"flex justify-between items-center\">\n            {controls.shuffle && (\n              <button\n                aria-label=\"Shuffle\"\n                className=\"opacity-70 hover:opacity-100 transition-opacity\"\n              >\n                <Shuffle className=\"h-5 w-5\" />\n              </button>\n            )}\n            <div className=\"flex items-center gap-5\">\n              <button\n                aria-label=\"Skip Back\"\n                className=\"opacity-70 hover:opacity-100 transition-opacity\"\n              >\n                <SkipBack className=\"h-6 w-6\" />\n              </button>\n              <button\n                aria-label=\"Play/Pause\"\n                className={`${getThemeColor()} text-black rounded-full p-3 hover:scale-105 transition-transform`}\n                onClick={togglePlay}\n              >\n                {isPlaying ? (\n                  <Pause className=\"h-6 w-6\" />\n                ) : (\n                  <Play className=\"h-6 w-6 fill-current\" />\n                )}\n              </button>\n              <button\n                aria-label=\"Skip Forward\"\n                className=\"opacity-70 hover:opacity-100 transition-opacity\"\n              >\n                <SkipForward className=\"h-6 w-6\" />\n              </button>\n            </div>\n            {controls.repeat && (\n              <button\n                aria-label=\"Repeat\"\n                className=\"opacity-70 hover:opacity-100 transition-opacity\"\n              >\n                <Repeat className=\"h-5 w-5\" />\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}