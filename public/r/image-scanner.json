{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-scanner",
  "type": "registry:ui",
  "title": "Image Scanner",
  "description": "A image scanner component that allows users to scan images.",
  "dependencies": [
    "motion",
    "framer-motion",
    ".."
  ],
  "files": [
    {
      "path": "registry/ui/image-scanner.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"../../lib/utils\";\nimport Image from \"next/image\";\n\nexport interface ImageScannerProps {\n  image: string;\n  alt?: string;\n  scanDirection?: \"horizontal\" | \"vertical\";\n  scanSpeed?: number;\n  scanColor?: \"emerald\" | \"blue\" | \"purple\" | \"amber\" | \"red\";\n  scanType?: \"line\" | \"corners\" | \"both\";\n  className?: string;\n  onScanComplete?: () => void;\n  autoScan?: boolean;\n  scanDelay?: number;\n  scanAtScroll?: boolean;\n  repeating?: boolean;\n  triggerScan?: boolean;\n}\n\nexport const ImageScanner = ({\n  image,\n  alt = \"Scanning image\",\n  scanDirection = \"horizontal\",\n  scanSpeed = 2,\n  scanColor = \"emerald\",\n  scanType = \"both\",\n  className,\n  onScanComplete,\n  autoScan = false,\n  scanDelay = 0,\n  scanAtScroll = false,\n  repeating = false,\n  triggerScan = false,\n}: ImageScannerProps) => {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanComplete, setScanComplete] = useState(false);\n  const [hasScanned, setHasScanned] = useState(false);\n  const [scanCycle, setScanCycle] = useState(0);\n  const ref = useRef<HTMLDivElement>(null);\n  const scanTimer = useRef<NodeJS.Timeout | null>(null);\n  const completeTimer = useRef<NodeJS.Timeout | null>(null);\n\n  const colorMap = {\n    emerald: {\n      scan: \"bg-emerald-500\",\n      glow: \"bg-emerald-500/20 dark:bg-emerald-500/10\",\n      border: \"border-emerald-500\",\n    },\n    blue: {\n      scan: \"bg-blue-500\",\n      glow: \"bg-blue-500/20 dark:bg-blue-500/10\",\n      border: \"border-blue-500\",\n    },\n    purple: {\n      scan: \"bg-purple-500\",\n      glow: \"bg-purple-500/20 dark:bg-purple-500/10\",\n      border: \"border-purple-500\",\n    },\n    amber: {\n      scan: \"bg-amber-500\",\n      glow: \"bg-amber-500/20 dark:bg-amber-500/10\",\n      border: \"border-amber-500\",\n    },\n    red: {\n      scan: \"bg-red-500\",\n      glow: \"bg-red-500/20 dark:bg-red-500/10\",\n      border: \"border-red-500\",\n    },\n  };\n\n  const runScan = () => {\n    if (!isScanning) {\n      setIsScanning(true);\n      setScanCycle((prev) => prev + 1);\n\n      completeTimer.current = setTimeout(() => {\n        setScanComplete(true);\n        setHasScanned(true);\n        if (onScanComplete) onScanComplete();\n\n        setTimeout(() => {\n          setScanComplete(false);\n          setIsScanning(false);\n          if (repeating) {\n            scanTimer.current = setTimeout(runScan, 1000);\n          }\n        }, 1000);\n      }, scanSpeed * 1000);\n    }\n  };\n\n  useEffect(() => {\n    if (!scanAtScroll || !ref.current) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting && !hasScanned && !isScanning) {\n          runScan();\n        }\n      },\n      { threshold: 0.5 },\n    );\n\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n    // eslint-disable-next-line\n  }, [scanAtScroll, hasScanned, isScanning]);\n\n  useEffect(() => {\n    if (autoScan && !hasScanned) {\n      scanTimer.current = setTimeout(runScan, scanDelay * 1000);\n    }\n\n    return () => {\n      if (scanTimer.current) clearTimeout(scanTimer.current);\n      if (completeTimer.current) clearTimeout(completeTimer.current);\n    };\n    // eslint-disable-next-line\n  }, [autoScan, scanDelay, hasScanned]);\n\n  useEffect(() => {\n    if (triggerScan && !isScanning) {\n      runScan();\n    }\n    // eslint-disable-next-line\n  }, [triggerScan]);\n\n  useEffect(() => {\n    if (repeating && !isScanning && !scanComplete) {\n      runScan();\n    }\n\n    return () => {\n      if (scanTimer.current) clearTimeout(scanTimer.current);\n      if (completeTimer.current) clearTimeout(completeTimer.current);\n    };\n    // eslint-disable-next-line\n  }, [repeating]);\n\n  useEffect(() => {\n    return () => {\n      if (scanTimer.current) clearTimeout(scanTimer.current);\n      if (completeTimer.current) clearTimeout(completeTimer.current);\n    };\n  }, []);\n\n  const startScan = () => {\n    if (!isScanning && !autoScan && !repeating) {\n      runScan();\n    }\n  };\n  const selectedColor = colorMap[scanColor] || colorMap.emerald;\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"relative overflow-hidden\", className)}\n      onClick={!autoScan && !scanAtScroll && !repeating ? startScan : undefined}\n    >\n      <div\n        className={cn(\n          \"w-full h-full relative overflow-hidden\",\n          scanComplete ? \"ring-2 ring-offset-2 dark:ring-offset-gray-900\" : \"\",\n          scanComplete ? selectedColor.border : \"\",\n        )}\n      >\n        <Image\n          src={image || \"/placeholder.svg\"}\n          alt={alt}\n          height={500}\n          width={500}\n          quality={100}\n          className=\"w-full h-full object-cover\"\n        />\n        <AnimatePresence mode=\"wait\">\n          {isScanning && (\n            <>\n              {(scanType === \"line\" || scanType === \"both\") && (\n                <motion.div\n                  key={`scanline-${scanCycle}`}\n                  className={cn(\n                    \"absolute pointer-events-none\",\n                    scanDirection === \"horizontal\"\n                      ? \"left-0 right-0 h-1\"\n                      : \"top-0 bottom-0 w-1\",\n                    selectedColor.scan,\n                  )}\n                  initial={\n                    scanDirection === \"horizontal\"\n                      ? { top: 0, opacity: 0.7 }\n                      : { left: 0, opacity: 0.7 }\n                  }\n                  animate={\n                    scanDirection === \"horizontal\"\n                      ? { top: \"100%\", opacity: 0.7 }\n                      : { left: \"100%\", opacity: 0.7 }\n                  }\n                  exit={\n                    scanDirection === \"horizontal\"\n                      ? { top: \"100%\", opacity: 0 }\n                      : { left: \"100%\", opacity: 0 }\n                  }\n                  transition={{\n                    duration: scanSpeed,\n                    ease: \"linear\",\n                  }}\n                />\n              )}\n              {(scanType === \"corners\" || scanType === \"both\") && (\n                <>\n                  <motion.div\n                    key={`corner-tl-${scanCycle}`}\n                    className={cn(\n                      \"absolute top-0 left-0 w-6 h-6 pointer-events-none\",\n                      \"border-t-2 border-l-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <motion.div\n                    key={`corner-tr-${scanCycle}`}\n                    className={cn(\n                      \"absolute top-0 right-0 w-6 h-6 pointer-events-none\",\n                      \"border-t-2 border-r-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <motion.div\n                    key={`corner-bl-${scanCycle}`}\n                    className={cn(\n                      \"absolute bottom-0 left-0 w-6 h-6 pointer-events-none\",\n                      \"border-b-2 border-l-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <motion.div\n                    key={`corner-br-${scanCycle}`}\n                    className={cn(\n                      \"absolute bottom-0 right-0 w-6 h-6 pointer-events-none\",\n                      \"border-b-2 border-r-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </>\n              )}\n              <motion.div\n                key={`glow-${scanCycle}`}\n                className={cn(\n                  \"absolute inset-0 pointer-events-none\",\n                  selectedColor.glow,\n                )}\n                initial={{ opacity: 0 }}\n                animate={{\n                  opacity: [0, 0.8, 0],\n                  transition: {\n                    repeat: 0,\n                    duration: scanSpeed / 2,\n                    repeatType: \"reverse\",\n                  },\n                }}\n                exit={{ opacity: 0 }}\n              />\n            </>\n          )}\n        </AnimatePresence>\n        <AnimatePresence>\n          {scanComplete && (\n            <motion.div\n              className={cn(\n                \"absolute inset-0 pointer-events-none\",\n                selectedColor.glow,\n              )}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 0.8 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.3 }}\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:ui",
      "target": "components/ui/majestic-card.tsx"
    },
    {
      "path": "registry\\ui\\image-scanner.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"../../lib/utils\";\nimport Image from \"next/image\";\n\nexport interface ImageScannerProps {\n  image: string;\n  alt?: string;\n  scanDirection?: \"horizontal\" | \"vertical\";\n  scanSpeed?: number;\n  scanColor?: \"emerald\" | \"blue\" | \"purple\" | \"amber\" | \"red\";\n  scanType?: \"line\" | \"corners\" | \"both\";\n  className?: string;\n  onScanComplete?: () => void;\n  autoScan?: boolean;\n  scanDelay?: number;\n  scanAtScroll?: boolean;\n  repeating?: boolean;\n  triggerScan?: boolean;\n}\n\nexport const ImageScanner = ({\n  image,\n  alt = \"Scanning image\",\n  scanDirection = \"horizontal\",\n  scanSpeed = 2,\n  scanColor = \"emerald\",\n  scanType = \"both\",\n  className,\n  onScanComplete,\n  autoScan = false,\n  scanDelay = 0,\n  scanAtScroll = false,\n  repeating = false,\n  triggerScan = false,\n}: ImageScannerProps) => {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanComplete, setScanComplete] = useState(false);\n  const [hasScanned, setHasScanned] = useState(false);\n  const [scanCycle, setScanCycle] = useState(0);\n  const ref = useRef<HTMLDivElement>(null);\n  const scanTimer = useRef<NodeJS.Timeout | null>(null);\n  const completeTimer = useRef<NodeJS.Timeout | null>(null);\n\n  const colorMap = {\n    emerald: {\n      scan: \"bg-emerald-500\",\n      glow: \"bg-emerald-500/20 dark:bg-emerald-500/10\",\n      border: \"border-emerald-500\",\n    },\n    blue: {\n      scan: \"bg-blue-500\",\n      glow: \"bg-blue-500/20 dark:bg-blue-500/10\",\n      border: \"border-blue-500\",\n    },\n    purple: {\n      scan: \"bg-purple-500\",\n      glow: \"bg-purple-500/20 dark:bg-purple-500/10\",\n      border: \"border-purple-500\",\n    },\n    amber: {\n      scan: \"bg-amber-500\",\n      glow: \"bg-amber-500/20 dark:bg-amber-500/10\",\n      border: \"border-amber-500\",\n    },\n    red: {\n      scan: \"bg-red-500\",\n      glow: \"bg-red-500/20 dark:bg-red-500/10\",\n      border: \"border-red-500\",\n    },\n  };\n\n  const runScan = () => {\n    if (!isScanning) {\n      setIsScanning(true);\n      setScanCycle((prev) => prev + 1);\n\n      completeTimer.current = setTimeout(() => {\n        setScanComplete(true);\n        setHasScanned(true);\n        if (onScanComplete) onScanComplete();\n\n        setTimeout(() => {\n          setScanComplete(false);\n          setIsScanning(false);\n          if (repeating) {\n            scanTimer.current = setTimeout(runScan, 1000);\n          }\n        }, 1000);\n      }, scanSpeed * 1000);\n    }\n  };\n\n  useEffect(() => {\n    if (!scanAtScroll || !ref.current) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const [entry] = entries;\n        if (entry.isIntersecting && !hasScanned && !isScanning) {\n          runScan();\n        }\n      },\n      { threshold: 0.5 },\n    );\n\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n    // eslint-disable-next-line\n  }, [scanAtScroll, hasScanned, isScanning]);\n\n  useEffect(() => {\n    if (autoScan && !hasScanned) {\n      scanTimer.current = setTimeout(runScan, scanDelay * 1000);\n    }\n\n    return () => {\n      if (scanTimer.current) clearTimeout(scanTimer.current);\n      if (completeTimer.current) clearTimeout(completeTimer.current);\n    };\n    // eslint-disable-next-line\n  }, [autoScan, scanDelay, hasScanned]);\n\n  useEffect(() => {\n    if (triggerScan && !isScanning) {\n      runScan();\n    }\n    // eslint-disable-next-line\n  }, [triggerScan]);\n\n  useEffect(() => {\n    if (repeating && !isScanning && !scanComplete) {\n      runScan();\n    }\n\n    return () => {\n      if (scanTimer.current) clearTimeout(scanTimer.current);\n      if (completeTimer.current) clearTimeout(completeTimer.current);\n    };\n    // eslint-disable-next-line\n  }, [repeating]);\n\n  useEffect(() => {\n    return () => {\n      if (scanTimer.current) clearTimeout(scanTimer.current);\n      if (completeTimer.current) clearTimeout(completeTimer.current);\n    };\n  }, []);\n\n  const startScan = () => {\n    if (!isScanning && !autoScan && !repeating) {\n      runScan();\n    }\n  };\n  const selectedColor = colorMap[scanColor] || colorMap.emerald;\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\"relative overflow-hidden\", className)}\n      onClick={!autoScan && !scanAtScroll && !repeating ? startScan : undefined}\n    >\n      <div\n        className={cn(\n          \"w-full h-full relative overflow-hidden\",\n          scanComplete ? \"ring-2 ring-offset-2 dark:ring-offset-gray-900\" : \"\",\n          scanComplete ? selectedColor.border : \"\",\n        )}\n      >\n        <Image\n          src={image || \"/placeholder.svg\"}\n          alt={alt}\n          height={500}\n          width={500}\n          quality={100}\n          className=\"w-full h-full object-cover\"\n        />\n        <AnimatePresence mode=\"wait\">\n          {isScanning && (\n            <>\n              {(scanType === \"line\" || scanType === \"both\") && (\n                <motion.div\n                  key={`scanline-${scanCycle}`}\n                  className={cn(\n                    \"absolute pointer-events-none\",\n                    scanDirection === \"horizontal\"\n                      ? \"left-0 right-0 h-1\"\n                      : \"top-0 bottom-0 w-1\",\n                    selectedColor.scan,\n                  )}\n                  initial={\n                    scanDirection === \"horizontal\"\n                      ? { top: 0, opacity: 0.7 }\n                      : { left: 0, opacity: 0.7 }\n                  }\n                  animate={\n                    scanDirection === \"horizontal\"\n                      ? { top: \"100%\", opacity: 0.7 }\n                      : { left: \"100%\", opacity: 0.7 }\n                  }\n                  exit={\n                    scanDirection === \"horizontal\"\n                      ? { top: \"100%\", opacity: 0 }\n                      : { left: \"100%\", opacity: 0 }\n                  }\n                  transition={{\n                    duration: scanSpeed,\n                    ease: \"linear\",\n                  }}\n                />\n              )}\n              {(scanType === \"corners\" || scanType === \"both\") && (\n                <>\n                  <motion.div\n                    key={`corner-tl-${scanCycle}`}\n                    className={cn(\n                      \"absolute top-0 left-0 w-6 h-6 pointer-events-none\",\n                      \"border-t-2 border-l-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <motion.div\n                    key={`corner-tr-${scanCycle}`}\n                    className={cn(\n                      \"absolute top-0 right-0 w-6 h-6 pointer-events-none\",\n                      \"border-t-2 border-r-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <motion.div\n                    key={`corner-bl-${scanCycle}`}\n                    className={cn(\n                      \"absolute bottom-0 left-0 w-6 h-6 pointer-events-none\",\n                      \"border-b-2 border-l-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                  <motion.div\n                    key={`corner-br-${scanCycle}`}\n                    className={cn(\n                      \"absolute bottom-0 right-0 w-6 h-6 pointer-events-none\",\n                      \"border-b-2 border-r-2\",\n                      selectedColor.border,\n                    )}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.3 }}\n                  />\n                </>\n              )}\n              <motion.div\n                key={`glow-${scanCycle}`}\n                className={cn(\n                  \"absolute inset-0 pointer-events-none\",\n                  selectedColor.glow,\n                )}\n                initial={{ opacity: 0 }}\n                animate={{\n                  opacity: [0, 0.8, 0],\n                  transition: {\n                    repeat: 0,\n                    duration: scanSpeed / 2,\n                    repeatType: \"reverse\",\n                  },\n                }}\n                exit={{ opacity: 0 }}\n              />\n            </>\n          )}\n        </AnimatePresence>\n        <AnimatePresence>\n          {scanComplete && (\n            <motion.div\n              className={cn(\n                \"absolute inset-0 pointer-events-none\",\n                selectedColor.glow,\n              )}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 0.8 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.3 }}\n            />\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}