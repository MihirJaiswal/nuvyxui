{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "morphing-button",
  "type": "registry:ui",
  "title": "Morphing Button",
  "description": "A button component with a morphing effect.",
  "dependencies": [],
  "files": [
    {
      "path": "src/nuvyxui/components/morphing-button.tsx",
      "content": "\"use client\";\nimport React, { useState, useMemo, ButtonHTMLAttributes } from \"react\";\n\nexport type MorphingButtonProps = {\n  variant?:\n    | \"expand\"\n    | \"collapse\"\n    | \"rotate\"\n    | \"skew\"\n    | \"liquid\"\n    | \"pulse\"\n    | \"bounce\";\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n  icon?: React.ReactNode;\n  iconPosition?: \"left\" | \"right\" | \"only\";\n  className?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst LoadingSpinner = () => (\n  <svg\n    className=\"animate-spin h-4 w-4\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n  >\n    <circle\n      className=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n    />\n    <path\n      className=\"opacity-75\"\n      fill=\"currentColor\"\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    />\n  </svg>\n);\n\nexport const MorphingButton = ({\n  variant = \"expand\",\n  size = \"md\",\n  icon,\n  iconPosition = \"left\",\n  className = \"\",\n  disabled = false,\n  loading = false,\n  children,\n  ...props\n}: MorphingButtonProps) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  const sizeClasses = useMemo(() => {\n    const sizes = {\n      xs: \"h-8 px-3 text-xs\",\n      sm: \"h-10 px-4 text-sm\",\n      md: \"h-12 px-5 text-base\",\n      lg: \"h-14 px-6 text-lg\",\n      xl: \"h-16 px-8 text-xl\",\n    };\n    return sizes[size];\n  }, [size]);\n\n  const iconContent = useMemo(() => {\n    if (loading) {\n      return (\n        <span\n          className={\n            iconPosition === \"only\"\n              ? \"\"\n              : iconPosition === \"left\"\n                ? \"mr-2\"\n                : \"ml-2\"\n          }\n        >\n          <LoadingSpinner />\n        </span>\n      );\n    }\n\n    if (!icon) return null;\n\n    const spacingClass =\n      iconPosition === \"only\" ? \"\" : iconPosition === \"left\" ? \"mr-2\" : \"ml-2\";\n\n    return (\n      <span\n        className={`transition-transform duration-300 ${isHovered && !disabled ? \"scale-110\" : \"\"} ${spacingClass}`}\n      >\n        {icon}\n      </span>\n    );\n  }, [icon, iconPosition, isHovered, disabled, loading]);\n\n  const content = useMemo(() => {\n    if (iconPosition === \"only\" && (icon || loading)) {\n      return iconContent;\n    }\n\n    return (\n      <>\n        {iconPosition === \"left\" && iconContent}\n        <span className=\"relative z-10\">{children}</span>\n        {iconPosition === \"right\" && iconContent}\n      </>\n    );\n  }, [children, icon, iconContent, iconPosition, loading]);\n\n  const variantClasses = useMemo(() => {\n    if (disabled || loading) {\n      return \"\";\n    }\n\n    switch (variant) {\n      case \"expand\":\n        return `transition-all duration-300 ${isHovered ? \"px-8\" : \"\"} relative overflow-hidden \n                before:absolute before:inset-0 before:transition-all before:duration-300 \n                before:bg-white before:opacity-0 ${isActive ? \"before:opacity-20 scale-95\" : \"\"}`;\n      case \"collapse\":\n        return `transition-all duration-300 transform ${isHovered ? \"scale-95\" : \"scale-100\"} ${isActive ? \"scale-90\" : \"\"}`;\n      case \"rotate\":\n        return `transition-all duration-300 transform ${isHovered ? \"rotate-2\" : \"rotate-0\"} ${isActive ? \"rotate-4\" : \"\"}`;\n      case \"skew\":\n        return `transition-all duration-300 transform ${isHovered ? \"skew-x-2\" : \"skew-x-0\"} ${isActive ? \"skew-x-4\" : \"\"}`;\n      case \"liquid\":\n        return `transition-all duration-300 ${isHovered ? \"rounded-2xl\" : \"\"} ${isActive ? \"rounded-full scale-95\" : \"\"}`;\n      case \"pulse\":\n        return `transition-all duration-300 ${isHovered ? \"animate-pulse\" : \"\"} ${isActive ? \"scale-95\" : \"scale-100\"}`;\n      case \"bounce\":\n        return `transition-transform duration-300 ${isHovered ? \"animate-[smoothBounce_1s_ease-in-out_infinite]\" : \"\"} ${isActive ? \"scale-95\" : \"scale-100\"}`;\n      default:\n        return \"\";\n    }\n  }, [variant, isHovered, isActive, disabled, loading]);\n\n  const disabledClasses =\n    disabled || loading ? \"opacity-50 cursor-not-allowed\" : \"cursor-pointer\";\n\n  const baseClasses = useMemo(\n    () => `\n    ${sizeClasses}\n    ${variantClasses}\n    ${disabledClasses}\n    inline-flex items-center justify-center font-medium \n    focus:outline-none ${!disabled ? \"focus:ring-2 focus:ring-offset-1\" : \"\"}\n    transition-all duration-300\n    backdrop-filter backdrop-blur-sm\n    ${className}\n  `,\n    [sizeClasses, variantClasses, disabledClasses, disabled, className],\n  );\n\n  const handleMouseEvents =\n    disabled || loading\n      ? {}\n      : {\n          onMouseEnter: () => setIsHovered(true),\n          onMouseLeave: () => {\n            setIsHovered(false);\n            setIsActive(false);\n          },\n          onMouseDown: () => setIsActive(true),\n          onMouseUp: () => setIsActive(false),\n        };\n\n  return (\n    <button\n      className={baseClasses}\n      type=\"button\"\n      disabled={disabled || loading}\n      aria-disabled={disabled || loading}\n      aria-pressed={isActive}\n      aria-busy={loading}\n      role=\"button\"\n      aria-label={loading ? \"Loading\" : \"Morphing Button\"}\n      {...handleMouseEvents}\n      {...props}\n    >\n      {content}\n    </button>\n  );\n};\n\nexport default MorphingButton;\n",
      "type": "registry:ui",
      "target": "components/ui/morphing-button.tsx"
    },
    {
      "path": "src\\nuvyxui\\components\\morphing-button.tsx",
      "content": "\"use client\";\nimport React, { useState, useMemo, ButtonHTMLAttributes } from \"react\";\n\nexport type MorphingButtonProps = {\n  variant?:\n    | \"expand\"\n    | \"collapse\"\n    | \"rotate\"\n    | \"skew\"\n    | \"liquid\"\n    | \"pulse\"\n    | \"bounce\";\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\n  icon?: React.ReactNode;\n  iconPosition?: \"left\" | \"right\" | \"only\";\n  className?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  children: React.ReactNode;\n} & ButtonHTMLAttributes<HTMLButtonElement>;\n\nconst LoadingSpinner = () => (\n  <svg\n    className=\"animate-spin h-4 w-4\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    fill=\"none\"\n    viewBox=\"0 0 24 24\"\n  >\n    <circle\n      className=\"opacity-25\"\n      cx=\"12\"\n      cy=\"12\"\n      r=\"10\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n    />\n    <path\n      className=\"opacity-75\"\n      fill=\"currentColor\"\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n    />\n  </svg>\n);\n\nexport const MorphingButton = ({\n  variant = \"expand\",\n  size = \"md\",\n  icon,\n  iconPosition = \"left\",\n  className = \"\",\n  disabled = false,\n  loading = false,\n  children,\n  ...props\n}: MorphingButtonProps) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  const sizeClasses = useMemo(() => {\n    const sizes = {\n      xs: \"h-8 px-3 text-xs\",\n      sm: \"h-10 px-4 text-sm\",\n      md: \"h-12 px-5 text-base\",\n      lg: \"h-14 px-6 text-lg\",\n      xl: \"h-16 px-8 text-xl\",\n    };\n    return sizes[size];\n  }, [size]);\n\n  const iconContent = useMemo(() => {\n    if (loading) {\n      return (\n        <span\n          className={\n            iconPosition === \"only\"\n              ? \"\"\n              : iconPosition === \"left\"\n                ? \"mr-2\"\n                : \"ml-2\"\n          }\n        >\n          <LoadingSpinner />\n        </span>\n      );\n    }\n\n    if (!icon) return null;\n\n    const spacingClass =\n      iconPosition === \"only\" ? \"\" : iconPosition === \"left\" ? \"mr-2\" : \"ml-2\";\n\n    return (\n      <span\n        className={`transition-transform duration-300 ${isHovered && !disabled ? \"scale-110\" : \"\"} ${spacingClass}`}\n      >\n        {icon}\n      </span>\n    );\n  }, [icon, iconPosition, isHovered, disabled, loading]);\n\n  const content = useMemo(() => {\n    if (iconPosition === \"only\" && (icon || loading)) {\n      return iconContent;\n    }\n\n    return (\n      <>\n        {iconPosition === \"left\" && iconContent}\n        <span className=\"relative z-10\">{children}</span>\n        {iconPosition === \"right\" && iconContent}\n      </>\n    );\n  }, [children, icon, iconContent, iconPosition, loading]);\n\n  const variantClasses = useMemo(() => {\n    if (disabled || loading) {\n      return \"\";\n    }\n\n    switch (variant) {\n      case \"expand\":\n        return `transition-all duration-300 ${isHovered ? \"px-8\" : \"\"} relative overflow-hidden \n                before:absolute before:inset-0 before:transition-all before:duration-300 \n                before:bg-white before:opacity-0 ${isActive ? \"before:opacity-20 scale-95\" : \"\"}`;\n      case \"collapse\":\n        return `transition-all duration-300 transform ${isHovered ? \"scale-95\" : \"scale-100\"} ${isActive ? \"scale-90\" : \"\"}`;\n      case \"rotate\":\n        return `transition-all duration-300 transform ${isHovered ? \"rotate-2\" : \"rotate-0\"} ${isActive ? \"rotate-4\" : \"\"}`;\n      case \"skew\":\n        return `transition-all duration-300 transform ${isHovered ? \"skew-x-2\" : \"skew-x-0\"} ${isActive ? \"skew-x-4\" : \"\"}`;\n      case \"liquid\":\n        return `transition-all duration-300 ${isHovered ? \"rounded-2xl\" : \"\"} ${isActive ? \"rounded-full scale-95\" : \"\"}`;\n      case \"pulse\":\n        return `transition-all duration-300 ${isHovered ? \"animate-pulse\" : \"\"} ${isActive ? \"scale-95\" : \"scale-100\"}`;\n      case \"bounce\":\n        return `transition-transform duration-300 ${isHovered ? \"animate-[smoothBounce_1s_ease-in-out_infinite]\" : \"\"} ${isActive ? \"scale-95\" : \"scale-100\"}`;\n      default:\n        return \"\";\n    }\n  }, [variant, isHovered, isActive, disabled, loading]);\n\n  const disabledClasses =\n    disabled || loading ? \"opacity-50 cursor-not-allowed\" : \"cursor-pointer\";\n\n  const baseClasses = useMemo(\n    () => `\n    ${sizeClasses}\n    ${variantClasses}\n    ${disabledClasses}\n    inline-flex items-center justify-center font-medium \n    focus:outline-none ${!disabled ? \"focus:ring-2 focus:ring-offset-1\" : \"\"}\n    transition-all duration-300\n    backdrop-filter backdrop-blur-sm\n    ${className}\n  `,\n    [sizeClasses, variantClasses, disabledClasses, disabled, className],\n  );\n\n  const handleMouseEvents =\n    disabled || loading\n      ? {}\n      : {\n          onMouseEnter: () => setIsHovered(true),\n          onMouseLeave: () => {\n            setIsHovered(false);\n            setIsActive(false);\n          },\n          onMouseDown: () => setIsActive(true),\n          onMouseUp: () => setIsActive(false),\n        };\n\n  return (\n    <button\n      className={baseClasses}\n      type=\"button\"\n      disabled={disabled || loading}\n      aria-disabled={disabled || loading}\n      aria-pressed={isActive}\n      aria-busy={loading}\n      role=\"button\"\n      aria-label={loading ? \"Loading\" : \"Morphing Button\"}\n      {...handleMouseEvents}\n      {...props}\n    >\n      {content}\n    </button>\n  );\n};\n\nexport default MorphingButton;\n",
      "type": "registry:component",
      "target": ""
    }
  ],
  "cssVars": {
    "theme": {
      "animate-smooth-bounce": "smoothBounce 1s ease-in-out infinite"
    }
  },
  "css": {
    "@keyframes smoothBounce": {
      "0%, 100%": {
        "transform": "translateY(0)"
      },
      "50%": {
        "transform": "translateY(-10px)"
      }
    }
  }
}