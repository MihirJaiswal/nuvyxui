{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "majestic-card",
  "type": "registry:ui",
  "title": "Majestic Card",
  "description": "A majestic card that that provide several effects.",
  "dependencies": [
    "motion",
    "..",
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ui/majestic-card.tsx",
      "content": "\"use client\";\nimport { useRef, useEffect, useState, useCallback, useMemo } from \"react\";\nimport { cn } from \"../../lib/utils\";\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  type HTMLMotionProps,\n} from \"framer-motion\";\n\nexport interface MajesticCardProps\n  extends Omit<HTMLMotionProps<\"div\">, \"style\"> {\n  variant?: \"float\" | \"magnetic\" | \"glow\" | \"breathe\";\n  intensity?: 1 | 2 | 3 | 4 | 5;\n  glowColor?: string;\n  hoverEffect?: boolean;\n  scrollEffect?: boolean;\n  reduceMotion?: boolean;\n  speed?: \"slow\" | \"normal\" | \"fast\";\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function MajesticCard({\n  variant = \"float\",\n  intensity = 3,\n  glowColor = \"rgba(147, 197, 253, 0.5)\",\n  hoverEffect = true,\n  scrollEffect = false,\n  reduceMotion = false,\n  speed = \"normal\",\n  className,\n  children,\n  ...props\n}: MajesticCardProps) {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 0.5, y: 0.5 });\n  const [floatPhase, setFloatPhase] = useState(0);\n\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const scale = useMotionValue(1);\n  const floatY = useMotionValue(0);\n  const floatX = useMotionValue(0);\n  const rotate = useMotionValue(0);\n\n  const springConfig = useMemo(\n    () => ({\n      stiffness: speed === \"fast\" ? 700 : speed === \"slow\" ? 200 : 400,\n      damping: speed === \"fast\" ? 20 : speed === \"slow\" ? 40 : 30,\n    }),\n    [speed],\n  );\n\n  const floatSpringConfig = useMemo(\n    () => ({\n      stiffness: 50,\n      damping: 30,\n      mass: 1.5,\n    }),\n    [],\n  );\n\n  const intensityFactors = useMemo(\n    () => ({\n      1: 0.2,\n      2: 0.4,\n      3: 0.6,\n      4: 0.8,\n      5: 1.0,\n    }),\n    [],\n  );\n\n  const springX = useSpring(x, springConfig);\n  const springY = useSpring(y, springConfig);\n  const springScale = useSpring(scale, springConfig);\n  const springFloatY = useSpring(floatY, floatSpringConfig);\n  const springFloatX = useSpring(floatX, floatSpringConfig);\n  const springRotate = useSpring(rotate, {\n    stiffness: 60,\n    damping: 20,\n    mass: 1,\n  });\n\n  useEffect(() => {\n    if (reduceMotion || variant !== \"float\") return;\n\n    let animationFrame: number;\n    let lastTime = 0;\n    const floatSpeed = speed === \"slow\" ? 0.5 : speed === \"fast\" ? 2 : 1;\n\n    const animate = (time: number) => {\n      if (!lastTime) lastTime = time;\n      const delta = (time - lastTime) / 1000;\n      lastTime = time;\n\n      setFloatPhase((prev) => (prev + delta * floatSpeed) % (Math.PI * 2));\n      animationFrame = requestAnimationFrame(animate);\n    };\n\n    animationFrame = requestAnimationFrame(animate);\n\n    return () => {\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [variant, reduceMotion, speed]);\n\n  useEffect(() => {\n    if (variant === \"float\" && !reduceMotion) {\n      const factor = intensityFactors[intensity];\n      floatY.set(Math.sin(floatPhase) * 10 * factor);\n      floatX.set(Math.sin(floatPhase * 0.5) * 5 * factor);\n      rotate.set(Math.sin(floatPhase * 0.3) * 2 * factor);\n    }\n  }, [\n    floatPhase,\n    variant,\n    intensity,\n    reduceMotion,\n    floatX,\n    floatY,\n    rotate,\n    intensityFactors,\n  ]);\n\n  useEffect(() => {\n    if (!cardRef.current || !hoverEffect || reduceMotion) return;\n\n    const card = cardRef.current;\n    const factor = intensityFactors[intensity];\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!card) return;\n      const rect = card.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      const mouseX = e.clientX - centerX;\n      const mouseY = e.clientY - centerY;\n      const normalizedX = (e.clientX - rect.left) / rect.width;\n      const normalizedY = (e.clientY - rect.top) / rect.height;\n      setMousePosition({\n        x: normalizedX,\n        y: normalizedY,\n      });\n\n      if (variant === \"breathe\") {\n      } else if (variant === \"magnetic\") {\n        const distance = Math.sqrt(Math.pow(mouseX, 2) + Math.pow(mouseY, 2));\n        const maxDistance =\n          Math.sqrt(\n            Math.pow(window.innerWidth, 2) + Math.pow(window.innerHeight, 2),\n          ) / 2;\n        const falloff = Math.max(0, 1 - distance / maxDistance);\n        const magneticStrength = 0.1;\n        x.set(mouseX * magneticStrength * factor * falloff);\n        y.set(mouseY * magneticStrength * factor * falloff);\n      }\n    };\n\n    const handleMouseLeave = () => {\n      if (variant !== \"magnetic\") {\n        x.set(0);\n        y.set(0);\n        scale.set(1);\n      }\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    card.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      card.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [\n    variant,\n    intensity,\n    hoverEffect,\n    reduceMotion,\n    x,\n    y,\n    scale,\n    intensityFactors,\n  ]);\n\n  useEffect(() => {\n    if (!scrollEffect || reduceMotion) return;\n\n    const handleScroll = () => {\n      if (!cardRef.current) return;\n      const rect = cardRef.current.getBoundingClientRect();\n      const windowHeight = window.innerHeight;\n      const visiblePercentage = Math.min(\n        Math.max(0, (windowHeight - rect.top) / windowHeight),\n        Math.max(0, rect.bottom / windowHeight),\n      );\n      const factor = intensityFactors[intensity];\n      if (rect.top < windowHeight && rect.bottom > 0) {\n        y.set(-window.scrollY * 0.05 * factor * visiblePercentage);\n        const scrollScale = 1 + visiblePercentage * 0.05 * factor;\n        scale.set(Math.min(scrollScale, 1.1));\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [scrollEffect, intensity, reduceMotion, y, scale, intensityFactors]);\n\n  const handleMouseEnter = useCallback(() => {\n    setIsHovered(true);\n    if (!reduceMotion && variant !== \"magnetic\") {\n      scale.set(1.02);\n    }\n  }, [reduceMotion, scale, variant]);\n\n  const handleMouseLeave = useCallback(() => {\n    setIsHovered(false);\n    if (!reduceMotion && variant !== \"magnetic\") {\n      scale.set(1);\n    }\n  }, [reduceMotion, scale, variant]);\n\n  const getGlowGradient = () => {\n    if (variant !== \"glow\" || !isHovered) return null;\n\n    const x = mousePosition.x * 100;\n    const y = mousePosition.y * 100;\n\n    return (\n      <div\n        className=\"absolute inset-0 pointer-events-none transition-opacity duration-300\"\n        style={{\n          background: `radial-gradient(circle at ${x}% ${y}%, ${glowColor}, transparent 60%)`,\n          opacity: isHovered ? 1 : 0,\n          borderRadius: \"inherit\",\n        }}\n      />\n    );\n  };\n\n  return (\n    <motion.div\n      ref={cardRef}\n      className={cn(\n        \"relative overflow-hidden transition-colors duration-300\",\n        variant === \"breathe\" && !reduceMotion && \"animate-pulse\",\n        className,\n      )}\n      style={{\n        x:\n          variant === \"float\" ? springFloatX : scrollEffect ? springY : springX,\n        y: variant === \"float\" ? springFloatY : springY,\n        rotate: variant === \"float\" ? springRotate : 0,\n        scale: springScale,\n        transformStyle: \"preserve-3d\",\n        perspective: \"1000px\",\n      }}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      transition={{ type: \"spring\", ...springConfig }}\n      {...props}\n    >\n      {getGlowGradient()}\n      {isHovered && className?.includes(\"backdrop-blur\") && (\n        <div\n          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent pointer-events-none\"\n          style={{\n            opacity: 0.1,\n            transform: \"rotate(30deg) translateX(-200%)\",\n            width: \"150%\",\n            height: \"200%\",\n            top: \"-50%\",\n            left: 0,\n          }}\n        />\n      )}\n      <div className=\"relative z-10\">{children}</div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/majestic-card.tsx"
    }
  ]
}