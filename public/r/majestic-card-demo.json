{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "majestic-card-demo",
  "type": "registry:example",
  "title": "Majestic Card Demo",
  "description": "Example showing a majestic card.",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "framer-motion"
  ],
  "registryDependencies": [
    "https://nuvyxui.vercel.app/r/majestic-card.json"
  ],
  "files": [
    {
      "path": "src/nuvyxui/demos/majestic-card-demo.tsx",
      "content": "\"use client\";\nimport { useState } from \"react\";\nimport { MajesticCard } from \"@/nuvyxui/components/majestic-card\";\nimport Image from \"next/image\";\n\nexport function MajesticCardDemo() {\n  const [isHovering, setIsHovering] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n\n  const handleMouseEnter = () => setIsHovering(true);\n  const handleMouseLeave = () => setIsHovering(false);\n\n  function toggleLike() {\n    setIsLiked((prev) => !prev);\n  }\n\n  return (\n    <div className=\"w-full flex flex-col items-center justify-center mx-auto\">\n      <div className=\"w-full max-w-md flex items-center justify-center mb-8\">\n        <h1 className=\"text-2xl font-bold mb-4\">Hover on the card</h1>\n      </div>\n      <div className=\"w-full max-w-md\">\n        <MajesticCard\n          variant={isHovering ? \"magnetic\" : \"float\"}\n          intensity={3}\n          hoverEffect\n          speed=\"normal\"\n          className=\"w-full mx-auto overflow-hidden rounded-xl shadow-md shadow-purple-500\"\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        >\n          <div className=\"relative\">\n            <div className=\"h-72 w-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center\">\n              <Image\n                src=\"/assets/images/majestic-card/img.jpg\"\n                alt=\"Quantum Processor\"\n                width={500}\n                height={500}\n                loading=\"lazy\"\n                quality={100}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n\n            <div className=\"absolute top-4 right-4 bg-white dark:bg-gray-800 rounded-full px-3 py-1 text-xs font-semibold text-purple-600 dark:text-purple-400\">\n              NEW\n            </div>\n          </div>\n\n          <MajesticCard\n            variant=\"glow\"\n            intensity={5}\n            className=\"bg-white dark:bg-black\"\n          >\n            <div className=\"p-5\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <h3 className=\"font-bold text-xl text-gray-900 dark:text-white\">\n                  Quantum Processor\n                </h3>\n                <span className=\"text-lg font-bold\">₹71,850</span>\n              </div>\n\n              <div className=\"mb-4\">\n                <div className=\"flex items-center mb-2\">\n                  <div className=\"flex text-yellow-400\">\n                    {[...Array(5)].map((_, i) => (\n                      <svg\n                        key={i}\n                        className=\"w-4 h-4 fill-current\"\n                        viewBox=\"0 0 20 20\"\n                      >\n                        <path d=\"M10 15.27L16.18 19l-1.64-7.03L20 7.24l-7.19-.61L10 0 7.19 6.63 0 7.24l5.46 4.73L3.82 19z\" />\n                      </svg>\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\n                    (42 reviews)\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Next-gen 128-core quantum chip with advanced AI capabilities\n                  and integrated neural processing for edge computing solutions.\n                </p>\n              </div>\n              <div className=\"flex justify-between items-center space-x-2\">\n                <MajesticCard variant=\"breathe\" className=\"rounded-lg\">\n                  <button className=\"p-[1.5px] relative rounded-lg\">\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-500 to-purple-500\" />\n                    <div className=\"px-6 py-1.5  bg-black rounded-lg relative group transition duration-200 text-white hover:bg-transparent\">\n                      Add to cart\n                    </div>\n                  </button>\n                </MajesticCard>\n                <button\n                  className=\"flex items-center justify-center p-2 transition-colors duration-200\"\n                  onClick={toggleLike}\n                  aria-label={isLiked ? \"Unlike\" : \"Like\"}\n                >\n                  {isLiked ? (\n                    <svg\n                      className=\"w-6 h-6 text-red-500 fill-current\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n                    </svg>\n                  ) : (\n                    <svg\n                      className=\"w-6 h-6 text-gray-700 dark:text-gray-300\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\n                      />\n                    </svg>\n                  )}\n                </button>\n              </div>\n            </div>\n          </MajesticCard>\n\n          <div className=\"px-5 py-3 bg-gray-50 dark:bg-gray-950 border-t-2  border-gray-200 dark:border-gray-700 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400\">\n            <span>In stock: 7 units</span>\n            <span className=\"flex items-center\">\n              <svg\n                className=\"w-4 h-4 mr-1\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n              Ships in 24 hours\n            </span>\n          </div>\n        </MajesticCard>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/majestic-card-demo.tsx"
    },
    {
      "path": "src\\nuvyxui\\demos\\majestic-card-demo.tsx",
      "content": "\"use client\";\nimport { useState } from \"react\";\nimport { MajesticCard } from \"@/nuvyxui/components/majestic-card\";\nimport Image from \"next/image\";\n\nexport function MajesticCardDemo() {\n  const [isHovering, setIsHovering] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n\n  const handleMouseEnter = () => setIsHovering(true);\n  const handleMouseLeave = () => setIsHovering(false);\n\n  function toggleLike() {\n    setIsLiked((prev) => !prev);\n  }\n\n  return (\n    <div className=\"w-full flex flex-col items-center justify-center mx-auto\">\n      <div className=\"w-full max-w-md flex items-center justify-center mb-8\">\n        <h1 className=\"text-2xl font-bold mb-4\">Hover on the card</h1>\n      </div>\n      <div className=\"w-full max-w-md\">\n        <MajesticCard\n          variant={isHovering ? \"magnetic\" : \"float\"}\n          intensity={3}\n          hoverEffect\n          speed=\"normal\"\n          className=\"w-full mx-auto overflow-hidden rounded-xl shadow-md shadow-purple-500\"\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        >\n          <div className=\"relative\">\n            <div className=\"h-72 w-full bg-gradient-to-r from-blue-400 to-purple-500 flex items-center justify-center\">\n              <Image\n                src=\"/assets/images/majestic-card/img.jpg\"\n                alt=\"Quantum Processor\"\n                width={500}\n                height={500}\n                loading=\"lazy\"\n                quality={100}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n\n            <div className=\"absolute top-4 right-4 bg-white dark:bg-gray-800 rounded-full px-3 py-1 text-xs font-semibold text-purple-600 dark:text-purple-400\">\n              NEW\n            </div>\n          </div>\n\n          <MajesticCard\n            variant=\"glow\"\n            intensity={5}\n            className=\"bg-white dark:bg-black\"\n          >\n            <div className=\"p-5\">\n              <div className=\"flex justify-between items-center mb-3\">\n                <h3 className=\"font-bold text-xl text-gray-900 dark:text-white\">\n                  Quantum Processor\n                </h3>\n                <span className=\"text-lg font-bold\">₹71,850</span>\n              </div>\n\n              <div className=\"mb-4\">\n                <div className=\"flex items-center mb-2\">\n                  <div className=\"flex text-yellow-400\">\n                    {[...Array(5)].map((_, i) => (\n                      <svg\n                        key={i}\n                        className=\"w-4 h-4 fill-current\"\n                        viewBox=\"0 0 20 20\"\n                      >\n                        <path d=\"M10 15.27L16.18 19l-1.64-7.03L20 7.24l-7.19-.61L10 0 7.19 6.63 0 7.24l5.46 4.73L3.82 19z\" />\n                      </svg>\n                    ))}\n                  </div>\n                  <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-2\">\n                    (42 reviews)\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Next-gen 128-core quantum chip with advanced AI capabilities\n                  and integrated neural processing for edge computing solutions.\n                </p>\n              </div>\n              <div className=\"flex justify-between items-center space-x-2\">\n                <MajesticCard variant=\"breathe\" className=\"rounded-lg\">\n                  <button className=\"p-[1.5px] relative rounded-lg\">\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-indigo-500 to-purple-500\" />\n                    <div className=\"px-6 py-1.5  bg-black rounded-lg relative group transition duration-200 text-white hover:bg-transparent\">\n                      Add to cart\n                    </div>\n                  </button>\n                </MajesticCard>\n                <button\n                  className=\"flex items-center justify-center p-2 transition-colors duration-200\"\n                  onClick={toggleLike}\n                  aria-label={isLiked ? \"Unlike\" : \"Like\"}\n                >\n                  {isLiked ? (\n                    <svg\n                      className=\"w-6 h-6 text-red-500 fill-current\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n                    </svg>\n                  ) : (\n                    <svg\n                      className=\"w-6 h-6 text-gray-700 dark:text-gray-300\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\n                      />\n                    </svg>\n                  )}\n                </button>\n              </div>\n            </div>\n          </MajesticCard>\n\n          <div className=\"px-5 py-3 bg-gray-50 dark:bg-gray-950 border-t-2  border-gray-200 dark:border-gray-700 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400\">\n            <span>In stock: 7 units</span>\n            <span className=\"flex items-center\">\n              <svg\n                className=\"w-4 h-4 mr-1\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n                />\n              </svg>\n              Ships in 24 hours\n            </span>\n          </div>\n        </MajesticCard>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\nuvyxui\\components\\majestic-card.tsx",
      "content": "\"use client\";\nimport { useRef, useEffect, useState, useCallback, useMemo } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  type HTMLMotionProps,\n} from \"framer-motion\";\n\nexport interface MajesticCardProps\n  extends Omit<HTMLMotionProps<\"div\">, \"style\"> {\n  variant?: \"float\" | \"magnetic\" | \"glow\" | \"breathe\";\n  intensity?: 1 | 2 | 3 | 4 | 5;\n  glowColor?: string;\n  hoverEffect?: boolean;\n  scrollEffect?: boolean;\n  reduceMotion?: boolean;\n  speed?: \"slow\" | \"normal\" | \"fast\";\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function MajesticCard({\n  variant = \"float\",\n  intensity = 3,\n  glowColor = \"rgba(147, 197, 253, 0.5)\",\n  hoverEffect = true,\n  scrollEffect = false,\n  reduceMotion = false,\n  speed = \"normal\",\n  className,\n  children,\n  ...props\n}: MajesticCardProps) {\n  const cardRef = useRef<HTMLDivElement>(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x: 0.5, y: 0.5 });\n  const [floatPhase, setFloatPhase] = useState(0);\n\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const scale = useMotionValue(1);\n  const floatY = useMotionValue(0);\n  const floatX = useMotionValue(0);\n  const rotate = useMotionValue(0);\n\n  const springConfig = useMemo(\n    () => ({\n      stiffness: speed === \"fast\" ? 700 : speed === \"slow\" ? 200 : 400,\n      damping: speed === \"fast\" ? 20 : speed === \"slow\" ? 40 : 30,\n    }),\n    [speed],\n  );\n\n  const floatSpringConfig = useMemo(\n    () => ({\n      stiffness: 50,\n      damping: 30,\n      mass: 1.5,\n    }),\n    [],\n  );\n\n  const intensityFactors = useMemo(\n    () => ({\n      1: 0.2,\n      2: 0.4,\n      3: 0.6,\n      4: 0.8,\n      5: 1.0,\n    }),\n    [],\n  );\n\n  const springX = useSpring(x, springConfig);\n  const springY = useSpring(y, springConfig);\n  const springScale = useSpring(scale, springConfig);\n  const springFloatY = useSpring(floatY, floatSpringConfig);\n  const springFloatX = useSpring(floatX, floatSpringConfig);\n  const springRotate = useSpring(rotate, {\n    stiffness: 60,\n    damping: 20,\n    mass: 1,\n  });\n\n  useEffect(() => {\n    if (reduceMotion || variant !== \"float\") return;\n\n    let animationFrame: number;\n    let lastTime = 0;\n    const floatSpeed = speed === \"slow\" ? 0.5 : speed === \"fast\" ? 2 : 1;\n\n    const animate = (time: number) => {\n      if (!lastTime) lastTime = time;\n      const delta = (time - lastTime) / 1000;\n      lastTime = time;\n\n      setFloatPhase((prev) => (prev + delta * floatSpeed) % (Math.PI * 2));\n      animationFrame = requestAnimationFrame(animate);\n    };\n\n    animationFrame = requestAnimationFrame(animate);\n\n    return () => {\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [variant, reduceMotion, speed]);\n\n  useEffect(() => {\n    if (variant === \"float\" && !reduceMotion) {\n      const factor = intensityFactors[intensity];\n      floatY.set(Math.sin(floatPhase) * 10 * factor);\n      floatX.set(Math.sin(floatPhase * 0.5) * 5 * factor);\n      rotate.set(Math.sin(floatPhase * 0.3) * 2 * factor);\n    }\n  }, [\n    floatPhase,\n    variant,\n    intensity,\n    reduceMotion,\n    floatX,\n    floatY,\n    rotate,\n    intensityFactors,\n  ]);\n\n  useEffect(() => {\n    if (!cardRef.current || !hoverEffect || reduceMotion) return;\n\n    const card = cardRef.current;\n    const factor = intensityFactors[intensity];\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!card) return;\n      const rect = card.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      const mouseX = e.clientX - centerX;\n      const mouseY = e.clientY - centerY;\n      const normalizedX = (e.clientX - rect.left) / rect.width;\n      const normalizedY = (e.clientY - rect.top) / rect.height;\n      setMousePosition({\n        x: normalizedX,\n        y: normalizedY,\n      });\n\n      if (variant === \"breathe\") {\n      } else if (variant === \"magnetic\") {\n        const distance = Math.sqrt(Math.pow(mouseX, 2) + Math.pow(mouseY, 2));\n        const maxDistance =\n          Math.sqrt(\n            Math.pow(window.innerWidth, 2) + Math.pow(window.innerHeight, 2),\n          ) / 2;\n        const falloff = Math.max(0, 1 - distance / maxDistance);\n        const magneticStrength = 0.1;\n        x.set(mouseX * magneticStrength * factor * falloff);\n        y.set(mouseY * magneticStrength * factor * falloff);\n      }\n    };\n\n    const handleMouseLeave = () => {\n      if (variant !== \"magnetic\") {\n        x.set(0);\n        y.set(0);\n        scale.set(1);\n      }\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    card.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      card.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [\n    variant,\n    intensity,\n    hoverEffect,\n    reduceMotion,\n    x,\n    y,\n    scale,\n    intensityFactors,\n  ]);\n\n  useEffect(() => {\n    if (!scrollEffect || reduceMotion) return;\n\n    const handleScroll = () => {\n      if (!cardRef.current) return;\n      const rect = cardRef.current.getBoundingClientRect();\n      const windowHeight = window.innerHeight;\n      const visiblePercentage = Math.min(\n        Math.max(0, (windowHeight - rect.top) / windowHeight),\n        Math.max(0, rect.bottom / windowHeight),\n      );\n      const factor = intensityFactors[intensity];\n      if (rect.top < windowHeight && rect.bottom > 0) {\n        y.set(-window.scrollY * 0.05 * factor * visiblePercentage);\n        const scrollScale = 1 + visiblePercentage * 0.05 * factor;\n        scale.set(Math.min(scrollScale, 1.1));\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [scrollEffect, intensity, reduceMotion, y, scale, intensityFactors]);\n\n  const handleMouseEnter = useCallback(() => {\n    setIsHovered(true);\n    if (!reduceMotion && variant !== \"magnetic\") {\n      scale.set(1.02);\n    }\n  }, [reduceMotion, scale, variant]);\n\n  const handleMouseLeave = useCallback(() => {\n    setIsHovered(false);\n    if (!reduceMotion && variant !== \"magnetic\") {\n      scale.set(1);\n    }\n  }, [reduceMotion, scale, variant]);\n\n  const getGlowGradient = () => {\n    if (variant !== \"glow\" || !isHovered) return null;\n\n    const x = mousePosition.x * 100;\n    const y = mousePosition.y * 100;\n\n    return (\n      <div\n        className=\"absolute inset-0 pointer-events-none transition-opacity duration-300\"\n        style={{\n          background: `radial-gradient(circle at ${x}% ${y}%, ${glowColor}, transparent 60%)`,\n          opacity: isHovered ? 1 : 0,\n          borderRadius: \"inherit\",\n        }}\n      />\n    );\n  };\n\n  return (\n    <motion.div\n      ref={cardRef}\n      className={cn(\n        \"relative overflow-hidden transition-colors duration-300\",\n        variant === \"breathe\" && !reduceMotion && \"animate-pulse\",\n        className,\n      )}\n      style={{\n        x:\n          variant === \"float\" ? springFloatX : scrollEffect ? springY : springX,\n        y: variant === \"float\" ? springFloatY : springY,\n        rotate: variant === \"float\" ? springRotate : 0,\n        scale: springScale,\n        transformStyle: \"preserve-3d\",\n        perspective: \"1000px\",\n      }}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      transition={{ type: \"spring\", ...springConfig }}\n      {...props}\n    >\n      {getGlowGradient()}\n      {isHovered && className?.includes(\"backdrop-blur\") && (\n        <div\n          className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent pointer-events-none\"\n          style={{\n            opacity: 0.1,\n            transform: \"rotate(30deg) translateX(-200%)\",\n            width: \"150%\",\n            height: \"200%\",\n            top: \"-50%\",\n            left: 0,\n          }}\n        />\n      )}\n      <div className=\"relative z-10\">{children}</div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\lib\\utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nuvyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nuvyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nuvyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}