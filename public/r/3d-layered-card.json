{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "3d-layered-card",
  "type": "registry:ui",
  "title": "3D Layered Card",
  "description": "A 3D layered card that that provide several effects.",
  "dependencies": [
    "framer-motion",
    "framer-motion"
  ],
  "files": [
    {
      "path": "registry/ui/3d-layered-card.tsx",
      "content": "\"use client\"\r\nimport type React from \"react\"\r\nimport { useState, useRef } from \"react\"\r\nimport { motion, useMotionValue, useSpring, useTransform } from \"framer-motion\"\r\nimport Image from \"next/image\"\r\n\r\ninterface CardProps {\r\n  logo: string\r\n  mainImage: string\r\n  title: string\r\n  children?: React.ReactNode\r\n  className?: string\r\n  // Size customization props\r\n  width?: number | string\r\n  height?: {\r\n    collapsed: number\r\n    expanded: number\r\n  }\r\n  logoSize?: number\r\n  logoPosition?: {\r\n    expanded: number\r\n  }\r\n  // Shine customization props\r\n  shineIntensity?: number\r\n  // Color and styling customization\r\n  backgroundColor?: string\r\n  borderColor?: string\r\n  borderWidth?: string\r\n  textColor?: string\r\n  glowColor?: string\r\n  glowGradient?: string\r\n  titlePosition?: number\r\n}\r\n\r\nexport default function ThreeDLayeredCard({\r\n  logo,\r\n  mainImage,\r\n  title,\r\n  children,\r\n  className = \"\",\r\n  width = 288,\r\n  height = {\r\n    collapsed: 130,\r\n    expanded: 300,\r\n  },\r\n  logoSize = 64,\r\n  logoPosition = {\r\n    expanded: 15,\r\n  },\r\n  shineIntensity = 0.3,\r\n  backgroundColor = \"bg-gradient-to-b from-[#FF9901] via-[#DF911A] to-[#724f13]\",\r\n  borderColor,\r\n  borderWidth = \"0\",\r\n  textColor = \"white\",\r\n  glowColor = \"rgba(255, 165, 0, 0.1)\",\r\n  glowGradient = \"#fde047\",\r\n  titlePosition = 90,\r\n}: CardProps) {\r\n  const [isHovered, setIsHovered] = useState(false)\r\n  const ref = useRef<HTMLDivElement>(null)\r\n\r\n  // Constants for image sizing\r\n  const IMAGE_SIZE = 128\r\n  const HALF_IMAGE_SIZE = IMAGE_SIZE / 2\r\n  const HALF_LOGO_SIZE = logoSize / 2\r\n\r\n  // Mouse position tracking for 3D tilt effect\r\n  const x = useMotionValue(0)\r\n  const y = useMotionValue(0)\r\n\r\n  // Spring animations for smooth movement\r\n  const mouseXSpring = useSpring(x, { stiffness: 400, damping: 30 })\r\n  const mouseYSpring = useSpring(y, { stiffness: 400, damping: 30 })\r\n\r\n  // Transform mouse position to rotation values\r\n  const rotateX = useTransform(mouseYSpring, [-0.5, 0.5], [\"-12deg\", \"12deg\"])\r\n  const rotateY = useTransform(mouseXSpring, [-0.5, 0.5], [\"12deg\", \"-12deg\"])\r\n\r\n  // Smooth lens effect that increases/decreases based on mouse position\r\n  const lensOverlay = useTransform(\r\n    mouseYSpring,\r\n    [-0.5, 0.5],\r\n    [\r\n      // Hovering up - darker overlay\r\n      `linear-gradient(180deg, \r\n        rgba(0, 0, 0, ${shineIntensity * 0.4}) 0%, \r\n        rgba(0, 0, 0, ${shineIntensity * 0.2}) 50%, \r\n        rgba(0, 0, 0, ${shineIntensity * 0.1}) 100%)`,\r\n      // Hovering down - brighter white overlay\r\n      `linear-gradient(180deg, \r\n        rgba(255, 255, 255, ${shineIntensity * 0.2}) 0%, \r\n        rgba(255, 255, 255, ${shineIntensity * 0.5}) 50%, \r\n        rgba(255, 255, 255, ${shineIntensity * 0.8}) 100%)`,\r\n    ],\r\n  )\r\n\r\n  // Dynamic movement for logo and text based on tilt direction\r\n  const logoMovement = logoSize < 30 ? 8 : logoSize < 50 ? 12 : 15\r\n  const logoMoveX = useTransform(mouseXSpring, [-0.5, 0.5], [logoMovement, -logoMovement])\r\n  const logoMoveY = useTransform(mouseYSpring, [-0.5, 0.5], [logoMovement, -logoMovement])\r\n  const textMoveX = useTransform(mouseXSpring, [-0.5, 0.5], [15, -15])\r\n  const textMoveY = useTransform(mouseYSpring, [-0.5, 0.5], [15, -15])\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    if (!ref.current) return\r\n    const rect = ref.current.getBoundingClientRect()\r\n    const width = rect.width\r\n    const height = rect.height\r\n    const mouseX = e.clientX - rect.left\r\n    const mouseY = e.clientY - rect.top\r\n\r\n    // Calculate position relative to center (-0.5 to 0.5) for 3D effect\r\n    const xPct = mouseX / width - 0.5\r\n    const yPct = mouseY / height - 0.5\r\n    x.set(xPct)\r\n    y.set(yPct)\r\n  }\r\n\r\n  const handleMouseEnter = () => {\r\n    setIsHovered(true)\r\n  }\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsHovered(false)\r\n    x.set(0)\r\n    y.set(0)\r\n  }\r\n\r\n  // Create border style only if both borderColor and borderWidth are provided\r\n  const borderStyle = borderColor && borderWidth !== \"0\"\r\n    ? {\r\n        border: `${borderWidth} solid ${borderColor}`,\r\n        borderRadius: \"0.375rem\",\r\n      }\r\n    : {}\r\n\r\n  // Convert width to pixels if it's a number, otherwise use as-is\r\n  const widthStyle = typeof width === 'number' ? `${width}px` : width\r\n\r\n  // Calculate expanded state logo position\r\n  const getExpandedLogoPosition = () => {\r\n    if (logoPosition?.expanded !== undefined) {\r\n      const minTop = -logoSize / 2\r\n      const maxTop = height.expanded - logoSize + 20\r\n      return `${Math.max(minTop, Math.min(logoPosition.expanded, maxTop))}px`\r\n    }\r\n    \r\n    // Default positioning based on logo size\r\n    const basePosition = logoSize < 30 ? 25 : logoSize < 50 ? 18 : logoSize < 70 ? 12 : 8\r\n    return `${basePosition}px`\r\n  }\r\n\r\n  // Calculate collapsed state logo position\r\n  const getCollapsedLogoPosition = () => {\r\n    const availableSpaceAboveTitle = titlePosition - 20\r\n    const logoTop = availableSpaceAboveTitle - logoSize\r\n    \r\n    if (logoTop < 10) {\r\n      return `${Math.max(10, (availableSpaceAboveTitle - logoSize) / 2)}px`\r\n    }\r\n    \r\n    return `${Math.max(10, logoTop)}px`\r\n  }\r\n\r\n  // Fixed title position\r\n  const getCollapsedTitlePosition = () => {\r\n    return `${titlePosition}px`\r\n  }\r\n\r\n  // Check if title will be visible in collapsed state\r\n  const isTitleVisible = () => {\r\n    const titleTop = titlePosition\r\n    const titleHeight = 24\r\n    return (titleTop + titleHeight) <= height.collapsed\r\n  }\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      className={`relative cursor-pointer ${className}`}\r\n      style={{\r\n        perspective: \"1000px\",\r\n        transformStyle: \"preserve-3d\",\r\n        width: widthStyle,\r\n        height: `${height.collapsed}px`,\r\n        zIndex: isHovered ? 50 : 1,\r\n      }}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      {/* Card content with overflow hidden and max-height animation */}\r\n      <motion.div\r\n        className=\"relative w-full border rounded-md shadow-2xl\"\r\n        style={{\r\n          rotateY: rotateY,\r\n          rotateX: rotateX,\r\n          transformStyle: \"preserve-3d\",\r\n          overflow: \"hidden\",\r\n          position: isHovered ? \"absolute\" : \"relative\",\r\n          top: isHovered ? `${-(height.expanded - height.collapsed) / 2}px` : \"auto\",\r\n          left: isHovered ? \"0\" : \"auto\",\r\n          right: isHovered ? \"0\" : \"auto\",\r\n          ...borderStyle,\r\n        }}\r\n        animate={{\r\n          height: isHovered ? `${height.expanded}px` : `${height.collapsed}px`,\r\n          boxShadow: isHovered \r\n            ? `0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.1), 0 0 20px ${glowColor}`\r\n            : \"0 25px 50px -12px rgba(0, 0, 0, 0.25)\",\r\n        }}\r\n        transition={{\r\n          type: \"spring\",\r\n          stiffness: 400,\r\n          damping: 25,\r\n          mass: 0.8,\r\n        }}\r\n      >\r\n        {/* Dynamic height inner container */}\r\n        <motion.div \r\n          className=\"relative w-full\"\r\n          style={{\r\n            height: isHovered ? `${height.expanded}px` : `${height.collapsed}px`,\r\n            minHeight: isHovered ? `${height.expanded}px` : `${height.collapsed}px`,\r\n          }}\r\n          animate={{\r\n            height: isHovered ? `${height.expanded}px` : `${height.collapsed}px`,\r\n          }}\r\n          transition={{\r\n            type: \"spring\",\r\n            stiffness: 400,\r\n            damping: 25,\r\n            mass: 0.8,\r\n          }}\r\n        >\r\n          {/* Background gradient */}\r\n          <div className={`absolute inset-0 ${backgroundColor}`} />\r\n          <div className=\"absolute inset-0 bg-gradient-to-b from-transparent to-black/30\" />\r\n\r\n          {/* Smooth linear lens effect overlay */}\r\n          <motion.div\r\n            className=\"absolute inset-0 pointer-events-none\"\r\n            style={{\r\n              background: lensOverlay,\r\n              mixBlendMode: \"overlay\",\r\n              zIndex: 25,\r\n            }}\r\n          />\r\n\r\n          {/* Glass lens effect */}\r\n          <motion.div\r\n            className=\"absolute inset-0 pointer-events-none\"\r\n            style={{\r\n              background:\r\n                \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 25%, transparent 50%, transparent 75%, rgba(255,255,255,0.03) 100%)\",\r\n              mixBlendMode: \"soft-light\",\r\n              zIndex: 24,\r\n            }}\r\n            animate={{\r\n              opacity: isHovered ? 0.6 : 0.3,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 300,\r\n              damping: 25,\r\n            }}\r\n          />\r\n\r\n          {/* Logo */}\r\n          <motion.div\r\n            className=\"absolute\"\r\n            style={{\r\n              transform: \"translateZ(60px)\",\r\n              transformStyle: \"preserve-3d\",\r\n              left: `calc(50% - ${HALF_LOGO_SIZE}px)`,\r\n              width: `${logoSize}px`,\r\n              height: `${logoSize}px`,\r\n              zIndex: 30,\r\n            }}\r\n            initial={{\r\n              top: getCollapsedLogoPosition(),\r\n              opacity: 1,\r\n            }}\r\n            animate={{\r\n              top: isHovered \r\n                ? getExpandedLogoPosition() \r\n                : getCollapsedLogoPosition(),\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 400,\r\n              damping: 25,\r\n              mass: 0.8,\r\n            }}\r\n          >\r\n            <motion.div\r\n              style={{\r\n                x: isHovered ? logoMoveX : 0,\r\n                y: isHovered ? logoMoveY : 0,\r\n                width: `${logoSize}px`,\r\n                height: `${logoSize}px`,\r\n              }}\r\n              className=\"relative\"\r\n            >\r\n              <Image \r\n                src={logo} \r\n                alt=\"Logo\" \r\n                fill \r\n                className=\"object-contain\"\r\n                sizes={`${logoSize}px`}\r\n              />\r\n            </motion.div>\r\n          </motion.div>\r\n\r\n          {/* Compact state title */}\r\n          {isTitleVisible() && (\r\n            <motion.div\r\n              className=\"absolute font-bold text-center\"\r\n              style={{\r\n                transform: \"translateZ(40px)\",\r\n                transformStyle: \"preserve-3d\",\r\n                width: \"calc(100% - 1rem)\",\r\n                left: \"0.5rem\",\r\n                right: \"0.5rem\",\r\n                top: getCollapsedTitlePosition(),\r\n                zIndex: 30,\r\n                color: textColor,\r\n              }}\r\n              initial={{\r\n                opacity: 1,\r\n                y: 0,\r\n              }}\r\n              animate={{\r\n                opacity: isHovered ? 0 : 1,\r\n                y: isHovered ? -20 : 0,\r\n              }}\r\n              transition={{\r\n                type: \"spring\",\r\n                stiffness: 500,\r\n                damping: 30,\r\n                mass: 0.7,\r\n              }}\r\n            >\r\n              <h2 className=\"drop-shadow-lg text-sm leading-tight overflow-hidden text-ellipsis\">\r\n                {title}\r\n              </h2>\r\n            </motion.div>\r\n          )}\r\n\r\n          {/* Expanded state children content */}\r\n          <motion.div\r\n            className=\"absolute text-center\"\r\n            style={{\r\n              transform: \"translateZ(40px)\",\r\n              transformStyle: \"preserve-3d\",\r\n              width: \"calc(100% - 2rem)\",\r\n              left: \"1rem\",\r\n              top: \"65%\",\r\n              zIndex: 30,\r\n              color: textColor,\r\n            }}\r\n            initial={{\r\n              opacity: 0,\r\n              y: 20,\r\n            }}\r\n            animate={{\r\n              opacity: isHovered ? 1 : 0,\r\n              y: isHovered ? 0 : 20,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 450,\r\n              damping: 28,\r\n              mass: 0.8,\r\n            }}\r\n          >\r\n            <motion.div\r\n              style={{\r\n                x: isHovered ? textMoveX : 0,\r\n                y: isHovered ? textMoveY : 0,\r\n              }}\r\n              className=\"flex flex-col items-center justify-center h-full\"\r\n            >\r\n              {children}\r\n            </motion.div>\r\n          </motion.div>\r\n\r\n          {/* Main character image */}\r\n          <motion.div\r\n            className=\"absolute\"\r\n            style={{\r\n              transform: \"translateZ(20px)\",\r\n              transformStyle: \"preserve-3d\",\r\n              left: `calc(50% - ${HALF_IMAGE_SIZE}px)`,\r\n              top: `calc(50% - ${HALF_IMAGE_SIZE + 21}px)`,\r\n              width: `${IMAGE_SIZE}px`,\r\n              height: `${IMAGE_SIZE}px`,\r\n              zIndex: 20,\r\n            }}\r\n            initial={{\r\n              opacity: 0,\r\n              scale: 0.8,\r\n            }}\r\n            animate={{\r\n              opacity: isHovered ? 1 : 0,\r\n              scale: isHovered ? 1 : 0.8,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 500,\r\n              damping: 30,\r\n              mass: 0.6,\r\n            }}\r\n          >\r\n            <div\r\n              className=\"relative\"\r\n              style={{\r\n                width: `${IMAGE_SIZE}px`,\r\n                height: `${IMAGE_SIZE}px`,\r\n              }}\r\n            >\r\n              <Image \r\n                src={mainImage} \r\n                alt=\"Character\" \r\n                fill \r\n                className=\"object-contain mask-b-from-25\"\r\n                sizes={`${IMAGE_SIZE}px`}\r\n              />\r\n            </div>\r\n            {/* Glow effect */}\r\n            <div\r\n              className=\"blur-xl absolute right-0 top-1 rounded-full -z-10\"\r\n              style={{\r\n                backgroundColor: glowGradient,\r\n                width: `${IMAGE_SIZE}px`,\r\n                height: `${IMAGE_SIZE}px`,\r\n              }}\r\n            />\r\n          </motion.div>\r\n\r\n          {/* Light reflection effect */}\r\n          <motion.div\r\n            className=\"absolute inset-0 rounded-md\"\r\n            style={{\r\n              background:\r\n                \"linear-gradient(135deg, rgba(255,255,255,0.1) 0%, transparent 30%, transparent 70%, rgba(255,255,255,0.03) 100%)\",\r\n              zIndex: 5,\r\n            }}\r\n            animate={{\r\n              opacity: isHovered ? 0.4 : 0.2,\r\n            }}\r\n            transition={{\r\n              type: \"spring\",\r\n              stiffness: 300,\r\n              damping: 25,\r\n            }}\r\n          />\r\n        </motion.div>\r\n      </motion.div>\r\n\r\n      {/* Bottom glow effect */}\r\n      <motion.div\r\n        className=\"absolute left-1/2 transform -translate-x-1/2 pointer-events-none\"\r\n        style={{\r\n          bottom: isHovered ? `${-20 - (height.expanded - height.collapsed)}px` : \"-20px\",\r\n          width: \"180px\",\r\n          height: \"25px\",\r\n          zIndex: -1,\r\n        }}\r\n        initial={{\r\n          opacity: 0,\r\n          scale: 1,\r\n        }}\r\n        animate={{\r\n          opacity: isHovered ? 0.25 : 0,\r\n          scale: isHovered ? 1.2 : 1,\r\n        }}\r\n        transition={{\r\n          type: \"spring\",\r\n          stiffness: 250,\r\n          damping: 30,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"w-full h-full\"\r\n          style={{\r\n            background: `radial-gradient(ellipse 100% 100% at 50% 0%, ${glowColor} 0%, rgba(255, 20, 147, 0.03) 30%, rgba(255, 165, 0, 0.01) 60%, transparent 100%)`,\r\n            filter: \"blur(8px)\",\r\n          }}\r\n        />\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}",
      "type": "registry:ui",
      "target": "components/ui/3d-layered-card.tsx"
    }
  ]
}