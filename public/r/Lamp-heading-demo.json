{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "lamp-heading-demo",
  "type": "registry:example",
  "title": "Lamp Heading Demo",
  "description": "Example showing a lamp heading.",
  "dependencies": [
    "framer-motion",
    "clsx",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "https://nuvyxui.vercel.app/r/lamp-heading"
  ],
  "files": [
    {
      "path": "src/nuvyxui/demos/lamp-heading-demo.tsx",
      "content": "import LampHeading from \"@/nuvyxui/components/lamp-heading\";\n\nexport const LampHeadingDemo = () => {\n  return (\n    <div className=\"flex flex-col w-full max-w-xl mx-auto p-8\">\n      <div className=\"p-12\">\n        <LampHeading\n          text=\"Image Generation\"\n          className=\"text-2xl\"\n          gradientColors={{ from: \"#ff3366\", to: \"#338ef7\" }}\n          lineHeight={2.5}\n          glowIntensity={0.8}\n          glowSize={44}\n          direction=\"above\"\n        />\n      </div>\n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"p-8\">\n          <LampHeading\n            text=\"AI Solutions\"\n            className=\"text-xl\"\n            gradientColors={{ from: \"#00c6ff\", to: \"#0072ff\" }}\n            lineHeight={2.5}\n            glowIntensity={0.8}\n            glowSize={15}\n          />\n        </div>\n\n        <div className=\"p-8\">\n          <LampHeading\n            text=\"Data Analysis\"\n            className=\"text-xl\"\n            gradientColors={{ from: \"#f857a6\", to: \"#ff5858\" }}\n            lineHeight={2}\n            glowIntensity={0.6}\n            glowSize={25}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:example",
      "target": "components/lamp-heading-demo.tsx"
    },
    {
      "path": "src\\nuvyxui\\demos\\lamp-heading-demo.tsx",
      "content": "import LampHeading from \"@/nuvyxui/components/lamp-heading\";\n\nexport const LampHeadingDemo = () => {\n  return (\n    <div className=\"flex flex-col w-full max-w-xl mx-auto p-8\">\n      <div className=\"p-12\">\n        <LampHeading\n          text=\"Image Generation\"\n          className=\"text-2xl\"\n          gradientColors={{ from: \"#ff3366\", to: \"#338ef7\" }}\n          lineHeight={2.5}\n          glowIntensity={0.8}\n          glowSize={44}\n          direction=\"above\"\n        />\n      </div>\n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"p-8\">\n          <LampHeading\n            text=\"AI Solutions\"\n            className=\"text-xl\"\n            gradientColors={{ from: \"#00c6ff\", to: \"#0072ff\" }}\n            lineHeight={2.5}\n            glowIntensity={0.8}\n            glowSize={15}\n          />\n        </div>\n\n        <div className=\"p-8\">\n          <LampHeading\n            text=\"Data Analysis\"\n            className=\"text-xl\"\n            gradientColors={{ from: \"#f857a6\", to: \"#ff5858\" }}\n            lineHeight={2}\n            glowIntensity={0.6}\n            glowSize={25}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\nuvyxui\\components\\lamp-heading.tsx",
      "content": "\"use client\";\nimport { useRef, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LampHeadingProps {\n  text: string;\n  className?: string;\n  gradientColors?: {\n    from: string;\n    to: string;\n  };\n  lineHeight?: number;\n  glowIntensity?: number;\n  glowSize?: number;\n  animationSpeed?: number;\n  direction?: \"above\" | \"below\";\n}\n\nexport const LampHeading = ({\n  text,\n  className,\n  gradientColors = { from: \"#ff3366\", to: \"#338ef7\" },\n  lineHeight = 2,\n  glowIntensity = 0.7,\n  glowSize = 20,\n  animationSpeed = 3,\n  direction = \"below\",\n}: LampHeadingProps) => {\n  const mainLineRef = useRef<HTMLDivElement>(null);\n  const flowAnimation = {\n    animate: {\n      backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n      transition: {\n        duration: animationSpeed,\n        ease: \"easeInOut\",\n        repeat: Infinity,\n      },\n    },\n  };\n\n  useEffect(() => {\n    if (mainLineRef.current) {\n      mainLineRef.current.style.backgroundSize = \"200% 200%\";\n    }\n  }, []);\n  const getGlowStyles = (size: number, intensity: number, index: number) => {\n    const baseStyles = {\n      position: \"absolute\" as const,\n      width: \"100%\",\n      height: `${size}px`,\n      background: `linear-gradient(to right, ${gradientColors.from}, ${gradientColors.to}, ${gradientColors.from})`,\n      filter: `blur(${glowSize / (index + 1)}px)`,\n      opacity: intensity,\n      left: 0,\n      backgroundSize: \"200% 200%\",\n    };\n    if (direction === \"below\") {\n      return {\n        ...baseStyles,\n        top: `${lineHeight + 1}px`,\n        transformOrigin: \"center top\",\n      };\n    } else {\n      return {\n        ...baseStyles,\n        bottom: `${lineHeight + 1}px`,\n        transformOrigin: \"center bottom\",\n      };\n    }\n  };\n\n  return (\n    <div className={cn(\"flex flex-col items-start\", className)}>\n      <h2 className=\"font-medium tracking-wide\">{text}</h2>\n      <div className=\"w-full relative mt-1\">\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          style={getGlowStyles(\n            Math.max(8, lineHeight * 3),\n            glowIntensity * 0.7,\n            1,\n          )}\n          className=\"rounded-full\"\n        />\n\n        <motion.div\n          variants={flowAnimation}\n          animate=\"animate\"\n          style={getGlowStyles(Math.max(4, lineHeight * 2), glowIntensity, 2)}\n          className=\"rounded-full\"\n          transition={{\n            duration: animationSpeed * 0.8,\n          }}\n        />\n\n        <motion.div\n          ref={mainLineRef}\n          variants={flowAnimation}\n          animate=\"animate\"\n          style={{\n            height: `${lineHeight}px`,\n            background: `linear-gradient(to right, ${gradientColors.from}, ${gradientColors.to}, ${gradientColors.from})`,\n            position: \"relative\",\n            zIndex: 10,\n            backgroundSize: \"200% 200%\",\n          }}\n          className=\"w-full rounded-full\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default LampHeading;\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\lib\\utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nuvyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nuvyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nuvyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}