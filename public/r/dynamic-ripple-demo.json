{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dynamic-ripple-demo",
  "type": "registry:example",
  "title": "Dynamic Ripple Demo",
  "description": "Example showing a dynamic ripple effect.",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://nuvyxui.vercel.app/r/dynamic-ripple.json"
  ],
  "files": [
    {
      "path": "src/nuvyxui/demos/dynamic-ripple-demo.tsx",
      "content": "import { DynamicRipple } from \"@/nuvyxui/components/dynamic-ripple\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Droplets, Waves, Sparkles } from \"lucide-react\";\n\nexport function DynamicRippleDemo() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-2 gap-4 sm:gap-6 p-4 sm:p-6 w-full max-w-7xl mx-auto\">\n      {/* Blue Theme Card */}\n      <DynamicRipple\n        theme=\"blue\"\n        intensity={3}\n        speed={3}\n        className=\"p-4 sm:p-6 h-full border border-blue-200 dark:border-blue-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Droplets className=\"w-4 h-4 sm:w-5 sm:h-5 text-blue-500\" />\n              <h3 className=\"text-base sm:text-lg font-semibold\">\n                Water Ripple Effect\n              </h3>\n            </div>\n            <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-200 text-xs sm:text-sm\">\n              Interactive\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            Move your cursor over this card to create dynamic water ripple\n            effects. Perfect for creating engaging UI elements.\n          </p>\n          <div className=\"flex justify-end mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-blue-600 border-blue-200 hover:bg-blue-50 hover:text-blue-700 text-xs sm:text-sm\"\n            >\n              Explore Effect\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n\n      {/* Purple Theme Card */}\n      <DynamicRipple\n        theme=\"purple\"\n        intensity={4}\n        speed={2}\n        className=\"p-4 sm:p-6 h-full border border-purple-200 dark:border-purple-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Waves className=\"w-4 h-4 sm:w-5 sm:h-5 text-purple-500\" />\n              <h3 className=\"text-base sm:text-lg font-semibold\">\n                Cosmic Waves\n              </h3>\n            </div>\n            <Badge className=\"bg-purple-100 text-purple-800 hover:bg-purple-200 text-xs sm:text-sm\">\n              High Intensity\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            A more intense ripple effect with slower speed, creating a cosmic\n            wave-like animation that reacts to your movements.\n          </p>\n          <div className=\"flex justify-end mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-purple-600 border-purple-200 hover:bg-purple-50 hover:text-purple-700 text-xs sm:text-sm\"\n            >\n              Try It Out\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n\n      {/* Green Theme Card */}\n      <DynamicRipple\n        theme=\"green\"\n        intensity={2}\n        speed={4}\n        rounded=\"xl\"\n        className=\"p-4 sm:p-6 h-full border border-green-200 dark:border-green-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500\" />\n              <h3 className=\"text-base sm:text-lg font-semibold\">\n                Nature Pulse\n              </h3>\n            </div>\n            <Badge className=\"bg-green-100 text-green-800 hover:bg-green-200 text-xs sm:text-sm\">\n              Fast\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            A subtle but fast ripple effect that mimics the gentle pulse of\n            nature. Lower intensity with higher speed.\n          </p>\n          <div className=\"flex justify-end mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-green-600 border-green-200 hover:bg-green-50 hover:text-green-700 text-xs sm:text-sm\"\n            >\n              Experience\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n\n      {/* Amber Theme Card */}\n      <DynamicRipple\n        theme=\"amber\"\n        intensity={5}\n        speed={5}\n        rounded=\"full\"\n        className=\"p-4 sm:p-6 h-full border border-amber-200 dark:border-amber-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4 items-center text-center\">\n          <div className=\"flex flex-col items-center gap-1 sm:gap-2\">\n            <Droplets className=\"w-6 h-6 sm:w-8 sm:h-8 text-amber-500\" />\n            <h3 className=\"text-base sm:text-lg font-semibold\">\n              Maximum Energy\n            </h3>\n            <Badge className=\"bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs sm:text-sm\">\n              Extreme\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            The most intense and fastest ripple effect, creating an energetic\n            and dynamic interaction experience.\n          </p>\n          <div className=\"mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-amber-600 border-amber-200 hover:bg-amber-50 hover:text-amber-700 text-xs sm:text-sm\"\n            >\n              Feel The Energy\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n    </div>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/dynamic-ripple-demo.tsx"
    },
    {
      "path": "src\\nuvyxui\\demos\\dynamic-ripple-demo.tsx",
      "content": "import { DynamicRipple } from \"@/nuvyxui/components/dynamic-ripple\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Droplets, Waves, Sparkles } from \"lucide-react\";\n\nexport function DynamicRippleDemo() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-2 gap-4 sm:gap-6 p-4 sm:p-6 w-full max-w-7xl mx-auto\">\n      {/* Blue Theme Card */}\n      <DynamicRipple\n        theme=\"blue\"\n        intensity={3}\n        speed={3}\n        className=\"p-4 sm:p-6 h-full border border-blue-200 dark:border-blue-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Droplets className=\"w-4 h-4 sm:w-5 sm:h-5 text-blue-500\" />\n              <h3 className=\"text-base sm:text-lg font-semibold\">\n                Water Ripple Effect\n              </h3>\n            </div>\n            <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-200 text-xs sm:text-sm\">\n              Interactive\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            Move your cursor over this card to create dynamic water ripple\n            effects. Perfect for creating engaging UI elements.\n          </p>\n          <div className=\"flex justify-end mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-blue-600 border-blue-200 hover:bg-blue-50 hover:text-blue-700 text-xs sm:text-sm\"\n            >\n              Explore Effect\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n\n      {/* Purple Theme Card */}\n      <DynamicRipple\n        theme=\"purple\"\n        intensity={4}\n        speed={2}\n        className=\"p-4 sm:p-6 h-full border border-purple-200 dark:border-purple-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Waves className=\"w-4 h-4 sm:w-5 sm:h-5 text-purple-500\" />\n              <h3 className=\"text-base sm:text-lg font-semibold\">\n                Cosmic Waves\n              </h3>\n            </div>\n            <Badge className=\"bg-purple-100 text-purple-800 hover:bg-purple-200 text-xs sm:text-sm\">\n              High Intensity\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            A more intense ripple effect with slower speed, creating a cosmic\n            wave-like animation that reacts to your movements.\n          </p>\n          <div className=\"flex justify-end mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-purple-600 border-purple-200 hover:bg-purple-50 hover:text-purple-700 text-xs sm:text-sm\"\n            >\n              Try It Out\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n\n      {/* Green Theme Card */}\n      <DynamicRipple\n        theme=\"green\"\n        intensity={2}\n        speed={4}\n        rounded=\"xl\"\n        className=\"p-4 sm:p-6 h-full border border-green-200 dark:border-green-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4\">\n          <div className=\"flex items-center justify-between flex-wrap gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4 sm:w-5 sm:h-5 text-green-500\" />\n              <h3 className=\"text-base sm:text-lg font-semibold\">\n                Nature Pulse\n              </h3>\n            </div>\n            <Badge className=\"bg-green-100 text-green-800 hover:bg-green-200 text-xs sm:text-sm\">\n              Fast\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            A subtle but fast ripple effect that mimics the gentle pulse of\n            nature. Lower intensity with higher speed.\n          </p>\n          <div className=\"flex justify-end mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-green-600 border-green-200 hover:bg-green-50 hover:text-green-700 text-xs sm:text-sm\"\n            >\n              Experience\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n\n      {/* Amber Theme Card */}\n      <DynamicRipple\n        theme=\"amber\"\n        intensity={5}\n        speed={5}\n        rounded=\"full\"\n        className=\"p-4 sm:p-6 h-full border border-amber-200 dark:border-amber-800\"\n      >\n        <div className=\"flex flex-col gap-3 sm:gap-4 items-center text-center\">\n          <div className=\"flex flex-col items-center gap-1 sm:gap-2\">\n            <Droplets className=\"w-6 h-6 sm:w-8 sm:h-8 text-amber-500\" />\n            <h3 className=\"text-base sm:text-lg font-semibold\">\n              Maximum Energy\n            </h3>\n            <Badge className=\"bg-amber-100 text-amber-800 hover:bg-amber-200 text-xs sm:text-sm\">\n              Extreme\n            </Badge>\n          </div>\n          <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">\n            The most intense and fastest ripple effect, creating an energetic\n            and dynamic interaction experience.\n          </p>\n          <div className=\"mt-1 sm:mt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-amber-600 border-amber-200 hover:bg-amber-50 hover:text-amber-700 text-xs sm:text-sm\"\n            >\n              Feel The Energy\n            </Button>\n          </div>\n        </div>\n      </DynamicRipple>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\nuvyxui\\components\\dynamic-ripple.tsx",
      "content": "\"use client\";\nimport type React from \"react\";\nimport { useRef, useEffect, useState, useMemo } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface Drop {\n  x: number;\n  y: number;\n  radius: number;\n  maxRadius: number;\n  speed: number;\n  opacity: number;\n  color: string;\n}\n\nexport interface DynamicRippleProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  theme?: \"blue\" | \"purple\" | \"green\" | \"amber\" | \"rose\" | \"custom\";\n  customColors?: {\n    primary: string;\n    secondary: string;\n  };\n  intensity?: 1 | 2 | 3 | 4 | 5;\n  speed?: 1 | 2 | 3 | 4 | 5;\n  reactToCursor?: boolean;\n  autoAnimate?: boolean;\n  rounded?: \"none\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"full\";\n  gradientOverlay?: boolean;\n  children: React.ReactNode;\n}\n\nexport function DynamicRipple({\n  theme = \"blue\",\n  customColors,\n  intensity = 3,\n  speed = 3,\n  reactToCursor = true,\n  autoAnimate = true,\n  rounded = \"lg\",\n  gradientOverlay = true,\n  className,\n  children,\n  ...props\n}: DynamicRippleProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const animationRef = useRef<number>(0);\n  const dropsRef = useRef<Drop[]>([]);\n\n  const intensityFactors = useMemo(\n    () => ({\n      1: { size: 0.6, opacity: 0.3, count: 3 },\n      2: { size: 0.8, opacity: 0.4, count: 5 },\n      3: { size: 1.0, opacity: 0.5, count: 7 },\n      4: { size: 1.2, opacity: 0.6, count: 9 },\n      5: { size: 1.5, opacity: 0.7, count: 12 },\n    }),\n    [],\n  );\n\n  const speedFactors = useMemo(\n    () => ({\n      1: 0.5,\n      2: 0.75,\n      3: 1.0,\n      4: 1.25,\n      5: 1.5,\n    }),\n    [],\n  );\n\n  const themeColors = useMemo(\n    () => ({\n      blue: {\n        primary: \"rgba(59, 130, 246, 0.7)\",\n        secondary: \"rgba(6, 182, 212, 0.7)\",\n        overlay: \"from-blue-500/10 to-cyan-500/10\",\n      },\n      purple: {\n        primary: \"rgba(139, 92, 246, 0.7)\",\n        secondary: \"rgba(216, 180, 254, 0.7)\",\n        overlay: \"from-purple-500/10 to-pink-500/10\",\n      },\n      green: {\n        primary: \"rgba(16, 185, 129, 0.7)\",\n        secondary: \"rgba(110, 231, 183, 0.7)\",\n        overlay: \"from-green-500/10 to-emerald-500/10\",\n      },\n      amber: {\n        primary: \"rgba(245, 158, 11, 0.7)\",\n        secondary: \"rgba(252, 211, 77, 0.7)\",\n        overlay: \"from-amber-500/10 to-yellow-500/10\",\n      },\n      rose: {\n        primary: \"rgba(244, 63, 94, 0.7)\",\n        secondary: \"rgba(251, 113, 133, 0.7)\",\n        overlay: \"from-rose-500/10 to-pink-500/10\",\n      },\n      custom: {\n        primary: customColors?.primary || \"rgba(59, 130, 246, 0.7)\",\n        secondary: customColors?.secondary || \"rgba(6, 182, 212, 0.7)\",\n        overlay: \"from-gray-500/10 to-gray-400/10\",\n      },\n    }),\n    [customColors],\n  );\n\n  const currentTheme = themeColors[theme];\n\n  const roundedStyles = useMemo(\n    () => ({\n      none: \"rounded-none\",\n      sm: \"rounded-sm\",\n      md: \"rounded-md\",\n      lg: \"rounded-lg\",\n      xl: \"rounded-xl\",\n      full: \"rounded-full\",\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    if (!canvasRef.current || !containerRef.current) return;\n\n    const updateDimensions = () => {\n      if (!containerRef.current) return;\n\n      const { width, height } = containerRef.current.getBoundingClientRect();\n      setDimensions({ width, height });\n\n      if (canvasRef.current) {\n        canvasRef.current.width = width;\n        canvasRef.current.height = height;\n      }\n    };\n\n    updateDimensions();\n\n    const container = containerRef.current;\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    resizeObserver.observe(container);\n\n    return () => {\n      resizeObserver.disconnect();\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!canvasRef.current || !dimensions.width || !dimensions.height) return;\n\n    const currentIntensityFactors = intensityFactors[intensity];\n    const currentSpeedFactor = speedFactors[speed];\n\n    const createDrop = (x: number, y: number, userInitiated = false) => {\n      const maxRadius =\n        Math.min(dimensions.width, dimensions.height) *\n        0.3 *\n        currentIntensityFactors.size;\n\n      return {\n        x,\n        y,\n        radius: 0,\n        maxRadius,\n        speed: currentSpeedFactor * (userInitiated ? 1.5 : 1),\n        opacity: currentIntensityFactors.opacity * (userInitiated ? 1.2 : 1),\n        color:\n          Math.random() > 0.5 ? currentTheme.primary : currentTheme.secondary,\n      };\n    };\n\n    if (autoAnimate) {\n      const initialDrops = Array.from({\n        length: currentIntensityFactors.count,\n      }).map(() => {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n        return createDrop(x, y);\n      });\n\n      dropsRef.current = initialDrops;\n    }\n\n    const handlePointerMove = (e: MouseEvent | TouchEvent) => {\n      if (!reactToCursor || !containerRef.current) return;\n\n      const rect = containerRef.current.getBoundingClientRect();\n      let clientX, clientY;\n\n      if (\"touches\" in e) {\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const x = clientX - rect.left;\n      const y = clientY - rect.top;\n\n      dropsRef.current.push(createDrop(x, y, true));\n\n      if (dropsRef.current.length > 20) {\n        dropsRef.current = dropsRef.current.slice(-20);\n      }\n    };\n\n    const container = containerRef.current;\n    if (reactToCursor && container) {\n      container.addEventListener(\"mousemove\", handlePointerMove);\n      container.addEventListener(\"touchmove\", handlePointerMove);\n    }\n\n    return () => {\n      if (container) {\n        container.removeEventListener(\"mousemove\", handlePointerMove);\n        container.removeEventListener(\"touchmove\", handlePointerMove);\n      }\n    };\n  }, [\n    dimensions,\n    intensity,\n    speed,\n    reactToCursor,\n    autoAnimate,\n    currentTheme.primary,\n    currentTheme.secondary,\n    intensityFactors,\n    speedFactors,\n  ]);\n\n  useEffect(() => {\n    if (!canvasRef.current || !dimensions.width || !dimensions.height) return;\n\n    const ctx = canvasRef.current.getContext(\"2d\");\n    if (!ctx) return;\n\n    const currentIntensityFactors = intensityFactors[intensity];\n    const currentSpeedFactor = speedFactors[speed];\n\n    const animate = () => {\n      ctx.clearRect(0, 0, dimensions.width, dimensions.height);\n      dropsRef.current = dropsRef.current.filter((drop) => {\n        drop.radius += drop.speed;\n        ctx.beginPath();\n        ctx.arc(drop.x, drop.y, drop.radius, 0, Math.PI * 2);\n        ctx.strokeStyle = drop.color;\n        ctx.lineWidth = 2;\n        ctx.globalAlpha = Math.max(\n          0,\n          drop.opacity * (1 - drop.radius / drop.maxRadius),\n        );\n        ctx.stroke();\n        return drop.radius < drop.maxRadius;\n      });\n\n      if (autoAnimate && Math.random() < 0.05 * currentSpeedFactor) {\n        const x = Math.random() * dimensions.width;\n        const y = Math.random() * dimensions.height;\n\n        dropsRef.current.push({\n          x,\n          y,\n          radius: 0,\n          maxRadius:\n            Math.min(dimensions.width, dimensions.height) *\n            0.2 *\n            currentIntensityFactors.size,\n          speed: currentSpeedFactor,\n          opacity: currentIntensityFactors.opacity,\n          color:\n            Math.random() > 0.5 ? currentTheme.primary : currentTheme.secondary,\n        });\n      }\n\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      cancelAnimationFrame(animationRef.current);\n    };\n  }, [\n    dimensions,\n    intensity,\n    speed,\n    autoAnimate,\n    currentTheme.primary,\n    currentTheme.secondary,\n    intensityFactors,\n    speedFactors,\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative overflow-hidden\",\n        roundedStyles[rounded],\n        className,\n      )}\n      {...props}\n    >\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full pointer-events-none\"\n      />\n      {gradientOverlay && (\n        <div\n          className={cn(\n            \"absolute inset-0 bg-gradient-to-br opacity-30 pointer-events-none\",\n            currentTheme.overlay,\n          )}\n        />\n      )}\n      <div className=\"relative z-10\">{children}</div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "src\\lib\\utils.ts",
      "content": "import clsx, { ClassValue } from \"clsx\";\nimport { Metadata } from \"next\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function humanize(name: string): string {\n  return name\n    .replace(/-/g, \" \")\n    .replace(/([A-Z])/g, \" $1\")\n    .trim()\n    .split(/\\s+/)\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n}\n\nexport const truncate = (str: string | null, length: number) => {\n  if (!str || str.length <= length) return str;\n  return `${str.slice(0, length - 3)}...`;\n};\n\nexport const fetcher = (...args: Parameters<typeof fetch>) =>\n  fetch(...args).then((res) => res.json());\n\nexport const capitalize = (str: string, lower = false) =>\n  (lower ? str.toLowerCase() : str).replace(/(?:^|\\s|[\"'([{])+\\S/g, (match) =>\n    match.toUpperCase(),\n  );\n\nexport function formatDate(input: string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString(\"en-US\", {\n    month: \"long\",\n    day: \"numeric\",\n    year: \"numeric\",\n  });\n}\n\nexport function absoluteUrl(path: string) {\n  return `${process.env.NEXT_PUBLIC_APP_URL || \"\"}${path}`;\n}\n\nexport function constructMetadata({\n  title = \"Nuvyx UI - Modern React + Tailwind CSS + Motion components & Templates\",\n  description = \"Nuvyx UI is a curated collection of the best landing page components built using React + Tailwind CSS + Motion\",\n  image = absoluteUrl(\"/og\"),\n  ...props\n}: {\n  title?: string;\n  description?: string;\n  image?: string;\n  [key: string]: Metadata[keyof Metadata];\n}): Metadata {\n  return {\n    title,\n    description,\n    keywords: [\n      \"React\",\n      \"Tailwind CSS\",\n      \"Motion\",\n      \"Landing Page\",\n      \"Components\",\n      \"Next.js\",\n    ],\n    openGraph: {\n      title,\n      description,\n      type: \"website\",\n      images: [\n        {\n          url: image,\n          width: 1200,\n          height: 630,\n        },\n      ],\n    },\n    twitter: {\n      card: \"summary_large_image\",\n      title,\n      description,\n      images: [image],\n      creator: \"@mihirjaiswal\",\n    },\n    icons: \"/favicon.ico\",\n    metadataBase: new URL(\"https://nuvyxui.vercel.app/\"),\n    authors: [\n      {\n        name: \"Mihir Jaiswal\",\n        url: \"https://github.com/MihirJaiswal\",\n      },\n    ],\n    creator: \"mihirjaiswal\",\n    ...props,\n  };\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src\\components\\ui\\button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-xl text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background text-foreground shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        rainbow:\n          \"group relative animate-rainbow cursor-pointer border-0 bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] bg-[length:200%] text-primary-foreground [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:[filter:blur(calc(0.8*1rem))] dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n        \"rainbow-outline\":\n          \"group relative animate-rainbow cursor-pointer border-0 border-input bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] bg-[length:200%] px-4 text-foreground shadow-sm [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:[filter:blur(calc(0.8*1rem))] dark:bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-xl px-3 text-xs\",\n        lg: \"h-11 rounded-xl px-8\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ninterface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        data-slot=\"button\"\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants, type ButtonProps };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src\\components\\ui\\badge.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\";\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}